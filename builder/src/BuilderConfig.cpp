/********************************************************************

  BuilderConfig.cpp, Ryu Sawada

  $Id$

********************************************************************/
#include "ArgusBuilder.h"

Bool_t ArgusBuilder::WriteConfigCpp() {
   Int_t i,j;
   ROMEString cppFile;
   ROMEString buffer;
   Int_t lenTot,ll;
   Char_t* pos;
   ROMEString format;
   ROMEString classDescription;

   classDescription.SetFormatted("This class handles the monitor configuration file (argusConfig.xml).");
   // File name
   cppFile.SetFormatted("%s/src/framework/%sConfig.cpp",outDir.Data(),shortCut.Data());

   // Description
   buffer.Resize(0);
   buffer.AppendFormatted("//// Author: %s\n",mainAuthor.Data());
   buffer.AppendFormatted("////////////////////////////////////////////////////////////////////////////////\n");
   buffer.AppendFormatted("//                                                                            //\n");
   ll = 74-shortCut.Length();
   format.SetFormatted("// %%s%%-%d.%ds //\n",ll,ll);
   buffer.AppendFormatted((Char_t*)format.Data(),shortCut.Data(),"Monitor");
   buffer.AppendFormatted("//                                                                            //\n");
   pos = (Char_t*)classDescription.Data();
   lenTot = classDescription.Length();
   while (pos-classDescription.Data() < lenTot) {
      if (lenTot+(classDescription.Data()-pos)<74)
         i=lenTot+(classDescription.Data()-pos);
      else for (i=74;pos[i]!=32&&i>0;i--) {}
      if (i<=0)
         i=TMath::Min(75,lenTot);
      pos[i] = 0;
      buffer.AppendFormatted("// %-74.74s   \n",pos);
      pos = pos+i+1;
   }
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("// This file has been generated by the ArgusBuilder.                          //\n");
   buffer.AppendFormatted("// Manual changes to this file will always be overwritten by the builder.     //\n");
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("////////////////////////////////////////////////////////////////////////////////\n\n");

   // Header
   buffer.AppendFormatted("#include <ROMEXMLDataBase.h>\n");
   buffer.AppendFormatted("#include <ROMETextDataBase.h>\n");
   buffer.AppendFormatted("#include <ROMENoDataBase.h>\n");
   buffer.AppendFormatted("#include <ROMEODBOfflineDataBase.h>\n");
   buffer.AppendFormatted("#include <ROMEODBOnlineDataBase.h>\n");
   buffer.AppendFormatted("#ifdef HAVE_SQL\n");
   buffer.AppendFormatted("#include <ROMESQLDataBase.h>\n");
   buffer.AppendFormatted("#endif\n");
   buffer.AppendFormatted("#include \"include/framework/%sConfig.h\"\n",shortCut.Data());
   buffer.AppendFormatted("#include \"include/framework/%sMonitor.h\"\n",shortCut.Data());
   buffer.AppendFormatted("#include \"include/framework/%sWindow.h\"\n",shortCut.Data());

   // Constructor
   buffer.AppendFormatted("\n// Constructor\n");
   buffer.AppendFormatted("%sConfig::%sConfig() {\n",shortCut.Data(),shortCut.Data());
   buffer.AppendFormatted("   fConfigData = new ConfigData*[1];\n");
   buffer.AppendFormatted("   fConfigData[0] = new ConfigData();\n");
   buffer.AppendFormatted("}\n\n");

   // Read Configuration File
   buffer.AppendFormatted("\n// Read Configuration File\n");
   buffer.AppendFormatted("Bool_t %sConfig::ReadConfigurationFile(const Char_t *file) {\n",shortCut.Data());
   buffer.AppendFormatted("   fXMLFile = file;\n");
   buffer.AppendFormatted("   ROMEXML *xml = new ROMEXML();\n");
   buffer.AppendFormatted("   xml->OpenFileForPath(fXMLFile);\n");
   buffer.AppendFormatted("   delete [] fConfigData;\n");
   buffer.AppendFormatted("   fConfigData = new ConfigData*[1];\n");
   buffer.AppendFormatted("   fConfigData[0] = new ConfigData();\n");
   buffer.AppendFormatted("   ROMEString path = \"/Configuration\";\n");
   buffer.AppendFormatted("   ReadConfiguration(xml,path,0);\n");
   buffer.AppendFormatted("   if (!SetConfiguration())\n");
   buffer.AppendFormatted("      return kFALSE;\n");
   buffer.AppendFormatted("   delete xml;\n");
   buffer.AppendFormatted("   return kTRUE;\n");
   buffer.AppendFormatted("}\n\n");

   // Read Configuration
   buffer.AppendFormatted("\n// Read Configuration\n");
   buffer.AppendFormatted("Bool_t %sConfig::ReadConfiguration(ROMEXML *xml,ROMEString& path,Int_t index) {\n",shortCut.Data());
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("   Int_t i;\n");
   buffer.AppendFormatted("   ROMEString buf = \"\";\n");
   // Window
   buffer.AppendFormatted("   // window\n");
   buffer.AppendFormatted("   fConfigData[index]->fWindow = new ConfigData::Window();\n");
   // Window/Scale
   buffer.AppendFormatted("   xml->GetPathValue(path+\"/Window/Scale\",fConfigData[index]->fWindow->fScale,\"\");\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fWindow->fScale==\"\")\n");
   buffer.AppendFormatted("      fConfigData[index]->fWindow->fScaleModified = kFALSE;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fWindow->fScaleModified = kTRUE;\n");
   // Window/StatusBar
   buffer.AppendFormatted("   xml->GetPathValue(path+\"/Window/StatusBar\",fConfigData[index]->fWindow->fStatusBar,\"\");\n");
   buffer.AppendFormatted("   fConfigData[index]->fWindow->fStatusBar.ToLower();\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fWindow->fStatusBar==\"\")\n");
   buffer.AppendFormatted("      fConfigData[index]->fWindow->fStatusBarModified = kFALSE;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fWindow->fStatusBarModified = kTRUE;\n");
   // --Window
   buffer.AppendFormatted("   if (fConfigData[index]->fWindow->fScaleModified ||\n");
   buffer.AppendFormatted("       fConfigData[index]->fWindow->fStatusBarModified)\n");
   buffer.AppendFormatted("      fConfigData[index]->fWindowModified = kTRUE;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fWindowModified = kFALSE;\n");
   buffer.AppendFormatted("\n");

   // DataBase
   buffer.AppendFormatted("   // database\n");
   buffer.AppendFormatted("   if (index==0) {\n");
   buffer.AppendFormatted("      int size = xml->NumberOfOccurrenceOfPath(path+\"/DataBases/DataBase\");\n");
   buffer.AppendFormatted("      gMonitor->InitDataBases(size);\n");
   buffer.AppendFormatted("      ROMEString dataBasePath;\n");
   buffer.AppendFormatted("      fConfigData[index]->fDataBase = new ConfigData::DataBase*[size];\n");
   buffer.AppendFormatted("      fConfigData[index]->fDataBaseModified = new bool[size];\n");
   buffer.AppendFormatted("      for (i=0;i<size;i++) {\n");
   buffer.AppendFormatted("         fConfigData[index]->fDataBase[i] = new ConfigData::DataBase();\n");
   // Name
   buffer.AppendFormatted("         dataBasePath.SetFormatted(\"/DataBases/DataBase[%%d]/Name\",i+1);\n");
   buffer.AppendFormatted("         xml->GetPathValue(path+dataBasePath,fConfigData[index]->fDataBase[i]->fName,\"\");\n");
   buffer.AppendFormatted("         if (fConfigData[index]->fDataBase[i]->fName==\"\")\n");
   buffer.AppendFormatted("            fConfigData[index]->fDataBase[i]->fNameModified = false;\n");
   buffer.AppendFormatted("         else\n");
   buffer.AppendFormatted("            fConfigData[index]->fDataBase[i]->fNameModified = true;\n");
   // Type
   buffer.AppendFormatted("         dataBasePath.SetFormatted(\"/DataBases/DataBase[%%d]/Type\",i+1);\n");
   buffer.AppendFormatted("         xml->GetPathValue(path+dataBasePath,fConfigData[index]->fDataBase[i]->fType,\"\");\n");
   buffer.AppendFormatted("         fConfigData[index]->fDataBase[i]->fType.ToLower();\n");
   buffer.AppendFormatted("         if (fConfigData[index]->fDataBase[i]->fType==\"\")\n");
   buffer.AppendFormatted("            fConfigData[index]->fDataBase[i]->fTypeModified = false;\n");
   buffer.AppendFormatted("         else\n");
   buffer.AppendFormatted("            fConfigData[index]->fDataBase[i]->fTypeModified = true;\n");
   // Connection
   buffer.AppendFormatted("         dataBasePath.SetFormatted(\"/DataBases/DataBase[%%d]/Connection\",i+1);\n");
   buffer.AppendFormatted("         xml->GetPathValue(path+dataBasePath,fConfigData[index]->fDataBase[i]->fConnection,\"\");\n");
   buffer.AppendFormatted("         if (fConfigData[index]->fDataBase[i]->fConnection==\"\")\n");
   buffer.AppendFormatted("            fConfigData[index]->fDataBase[i]->fConnectionModified = false;\n");
   buffer.AppendFormatted("         else\n");
   buffer.AppendFormatted("            fConfigData[index]->fDataBase[i]->fConnectionModified = true;\n");
   // --DataBase
   buffer.AppendFormatted("         if (fConfigData[index]->fDataBase[i]->fNameModified ||\n");
   buffer.AppendFormatted("             fConfigData[index]->fDataBase[i]->fTypeModified ||\n");
   buffer.AppendFormatted("             fConfigData[index]->fDataBase[i]->fConnectionModified) {\n");
   buffer.AppendFormatted("            fConfigData[index]->fDataBaseModified[i] = true;\n");
   buffer.AppendFormatted("            fConfigData[index]->fDataBasesModified = true;\n");
   buffer.AppendFormatted("         }\n");
   buffer.AppendFormatted("         else\n");
   buffer.AppendFormatted("            fConfigData[index]->fDataBaseModified[i] = false;\n");
   buffer.AppendFormatted("      }\n");
   buffer.AppendFormatted("   }\n");

   // Online
   buffer.AppendFormatted("   // online\n");
   buffer.AppendFormatted("   fConfigData[index]->fOnline = new ConfigData::Online();\n");
   // Online/Host
   buffer.AppendFormatted("   xml->GetPathValue(path+\"/Online/Host\",fConfigData[index]->fOnline->fHost,\"\");\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fOnline->fHost==\"\")\n");
   buffer.AppendFormatted("      fConfigData[index]->fOnline->fHostModified = kFALSE;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fOnline->fHostModified = kTRUE;\n");
   // Online/Experiment
   buffer.AppendFormatted("   xml->GetPathValue(path+\"/Online/Experiment\",fConfigData[index]->fOnline->fExperiment,\"\");\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fOnline->fExperiment==\"\")\n");
   buffer.AppendFormatted("      fConfigData[index]->fOnline->fExperimentModified = kFALSE;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fOnline->fExperimentModified = kTRUE;\n");
   // --Online
   buffer.AppendFormatted("   if (fConfigData[index]->fOnline->fHostModified ||\n");
   buffer.AppendFormatted("       fConfigData[index]->fOnline->fExperimentModified)\n");
   buffer.AppendFormatted("      fConfigData[index]->fOnlineModified = kTRUE;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fOnlineModified = kFALSE;\n");
   buffer.AppendFormatted("\n");

   // NetFolder
   if(numOfNetFolder>0){
      buffer.AppendFormatted("   // NetFolder\n");
      for(i=0;i<numOfNetFolder;i++){
         buffer.AppendFormatted("   fConfigData[index]->fNetFolder[%d] = new ConfigData::NetFolder();\n",i);
         // NetFolder/Active
         buffer.AppendFormatted("   xml->GetPathValue(path+\"/NetFolders/%s/Active\",fConfigData[index]->fNetFolder[%d]->fActive,\"\");\n",netFolderName[i].Data(),i);
         buffer.AppendFormatted("   if (fConfigData[index]->fNetFolder[%d]->fActive==\"\")\n",i);
         buffer.AppendFormatted("      fConfigData[index]->fNetFolder[%d]->fActiveModified = kFALSE;\n",i);
         buffer.AppendFormatted("   else\n");
         buffer.AppendFormatted("      fConfigData[index]->fNetFolder[%d]->fActiveModified = kTRUE;\n",i);
         // NetFolder/Reconnect
         buffer.AppendFormatted("   xml->GetPathValue(path+\"/NetFolders/%s/Reconnect\",fConfigData[index]->fNetFolder[%d]->fReconnect,\"\");\n",netFolderName[i].Data(),i);
         buffer.AppendFormatted("   if (fConfigData[index]->fNetFolder[%d]->fReconnect==\"\")\n",i);
         buffer.AppendFormatted("      fConfigData[index]->fNetFolder[%d]->fReconnectModified = kFALSE;\n",i);
         buffer.AppendFormatted("   else\n");
         buffer.AppendFormatted("      fConfigData[index]->fNetFolder[%d]->fReconnectModified = kTRUE;\n",i);
         // NetFolder/Host
         buffer.AppendFormatted("   xml->GetPathValue(path+\"/NetFolders/%s/Host\",fConfigData[index]->fNetFolder[%d]->fHost,\"\");\n",netFolderName[i].Data(),i);
         buffer.AppendFormatted("   if (fConfigData[index]->fNetFolder[%d]->fHost==\"\")\n",i);
         buffer.AppendFormatted("      fConfigData[index]->fNetFolder[%d]->fHostModified = kFALSE;\n",i);
         buffer.AppendFormatted("   else\n");
         buffer.AppendFormatted("      fConfigData[index]->fNetFolder[%d]->fHostModified = kTRUE;\n",i);
         // NetFolder/Port
         buffer.AppendFormatted("   xml->GetPathValue(path+\"/NetFolders/%s/Port\",fConfigData[index]->fNetFolder[%d]->fPort,\"\");\n",netFolderName[i].Data(),i);
         buffer.AppendFormatted("   if (fConfigData[index]->fNetFolder[%d]->fPort==\"\")\n",i);
         buffer.AppendFormatted("      fConfigData[index]->fNetFolder[%d]->fPortModified = kFALSE;\n",i);
         buffer.AppendFormatted("   else\n");
         buffer.AppendFormatted("      fConfigData[index]->fNetFolder[%d]->fPortModified = kTRUE;\n",i);
         // NetFolder/Root
         buffer.AppendFormatted("   xml->GetPathValue(path+\"/NetFolders/%s/Root\",fConfigData[index]->fNetFolder[%d]->fRoot,\"\");\n",netFolderName[i].Data(),i);
         buffer.AppendFormatted("   if (fConfigData[index]->fNetFolder[%d]->fRoot==\"\")\n",i);
         buffer.AppendFormatted("      fConfigData[index]->fNetFolder[%d]->fRootModified = kFALSE;\n",i);
         buffer.AppendFormatted("   else\n");
         buffer.AppendFormatted("      fConfigData[index]->fNetFolder[%d]->fRootModified = kTRUE;\n",i);
         // --NetFolder
         buffer.AppendFormatted("   if (fConfigData[index]->fNetFolder[%d]->fActiveModified    ||\n",i);
         buffer.AppendFormatted("       fConfigData[index]->fNetFolder[%d]->fReconnectModified ||\n",i);
         buffer.AppendFormatted("       fConfigData[index]->fNetFolder[%d]->fHostModified      ||\n",i);
         buffer.AppendFormatted("       fConfigData[index]->fNetFolder[%d]->fPortModified      ||\n",i);
         buffer.AppendFormatted("       fConfigData[index]->fNetFolder[%d]->fRootModified)\n",i);
         buffer.AppendFormatted("      fConfigData[index]->fNetFolderModified[%d] = kTRUE;\n",i);
         buffer.AppendFormatted("   else\n");
         buffer.AppendFormatted("      fConfigData[index]->fNetFolderModified[%d] = kFALSE;\n",i);
         buffer.AppendFormatted("\n");
      }
      buffer.AppendFormatted("      fConfigData[index]->fNetFoldersModified = kFALSE;\n");
      for(i=0;i<numOfNetFolder;i++){
         buffer.AppendFormatted("      if(fConfigData[index]->fNetFolderModified[%d])\n",i);
         buffer.AppendFormatted("         fConfigData[index]->fNetFoldersModified = kTRUE;\n");
      }
   }

   // Tabs
   buffer.AppendFormatted("   // tabs\n");
   buffer.AppendFormatted("   fConfigData[index]->fTabsModified = kFALSE;\n");
   ROMEString pointer;
   ROMEString path;
   ROMEString classname;
   for (i=0;i<numOfTab;i++) {
      buffer.AppendFormatted("   // %s Tab\n",tabName[i].Data());
      Int_t index = i;
      pointer.Resize(0);
      path.Resize(0);
      classname.Resize(0);
      while (index!=-1) {
         pointer.InsertFormatted(0,"->f%sTab",tabName[index].Data());
         path.InsertFormatted(0,"/Tab[TabName='%s']",tabName[index].Data());
         classname.InsertFormatted(0,"::%sTab",tabName[index].Data());
         index = tabParentIndex[index];
      }
      buffer.AppendFormatted("   fConfigData[index]%s = new ConfigData%s();\n",pointer.Data(),classname.Data());
      // Active
      buffer.AppendFormatted("   xml->GetPathValue(path+\"/Tabs%s/Active\",fConfigData[index]%s->fActive,\"\");\n",path.Data(),pointer.Data());
      buffer.AppendFormatted("   if (fConfigData[index]%s->fActive==\"\")\n",pointer.Data());
      buffer.AppendFormatted("      fConfigData[index]%s->fActiveModified = kFALSE;\n",pointer.Data());
      buffer.AppendFormatted("   else\n");
      buffer.AppendFormatted("      fConfigData[index]%s->fActiveModified = kTRUE;\n",pointer.Data());
      // Steering parameter
      if (numOfSteering[i]>0) {
         buffer.AppendFormatted("   // steering parameters\n");
         buffer.AppendFormatted("   fConfigData[index]%s->fSteering = new ConfigData%s::Steering();\n",pointer.Data(),classname.Data());
         ROMEString pathT;
         ROMEString pointerT;
         ROMEString classT;
         ROMEString indexT;
         ROMEString blankT;
         Int_t indexCounter = 0;
         pathT.SetFormatted("path+\"/Tabs%s",path.Data());
         pointerT.SetFormatted("fConfigData[index]%s->fSteering",pointer.Data());
         classT.SetFormatted("ConfigData%s::Steering",classname.Data());
         WriteSteeringConfigRead(buffer,0,i,xml,pathT,pointerT,classT,indexT,blankT,&indexCounter);
      }
      // all
      buffer.AppendFormatted("   if (fConfigData[index]%s->fActiveModified",pointer.Data());
      if (numOfSteering[i]>0)
         buffer.AppendFormatted("\n    || fConfigData[index]%s->fSteeringModified",pointer.Data());
      buffer.AppendFormatted(") {\n");
      buffer.AppendFormatted("      fConfigData[index]->fTabsModified = kTRUE;\n");
      buffer.AppendFormatted("      fConfigData[index]%sModified = kTRUE;\n",pointer.Data());
      ROMEString tempPointer = pointer;
      while (kTRUE) {
         for (j=tempPointer.Length()-1;tempPointer[j]!='>' && j>0;j--) {}
         if (j<=1)
            break;
         tempPointer = tempPointer(0,j-1);
         buffer.AppendFormatted("      fConfigData[index]%sModified = kTRUE;\n",tempPointer.Data());
      }
      buffer.AppendFormatted("   }\n");
      buffer.AppendFormatted("   else\n");
      buffer.AppendFormatted("      fConfigData[index]%sModified = kFALSE;\n",pointer.Data());
   }

   // Folders
   buffer.AppendFormatted("   // folders\n");
   for (i=0;i<numOfFolder;i++) {
      if (folderDataBase[i] && !folderSupport[i]) {
         buffer.AppendFormatted("   // %s Folder\n",folderName[i].Data());
         for (j=0;j<numOfValue[i];j++) {
            if(valueDimension[i][j]>1)
               continue;
            buffer.AppendFormatted("   // %s Field\n",valueName[i][j].Data());
            // Name
            buffer.AppendFormatted("   xml->GetPathValue(path+\"/Folders/Folder[FolderName='%s']/Field[FieldName='%s']/DataBaseName\",fConfigData[index]->f%sFolder->f%sField->fName,\"\");\n",folderName[i].Data(),valueName[i][j].Data(),folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("   if (fConfigData[index]->f%sFolder->f%sField->fName==\"\")\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("      fConfigData[index]->f%sFolder->f%sField->fNameModified = false;\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("   else\n");
            buffer.AppendFormatted("      fConfigData[index]->f%sFolder->f%sField->fNameModified = true;\n",folderName[i].Data(),valueName[i][j].Data());
            // Path
            buffer.AppendFormatted("   xml->GetPathValue(path+\"/Folders/Folder[FolderName='%s']/Field[FieldName='%s']/DataBasePath\",fConfigData[index]->f%sFolder->f%sField->fPath,\"\");\n",folderName[i].Data(),valueName[i][j].Data(),folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("   if (fConfigData[index]->f%sFolder->f%sField->fPath==\"\")\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("      fConfigData[index]->f%sFolder->f%sField->fPathModified = false;\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("   else\n");
            buffer.AppendFormatted("      fConfigData[index]->f%sFolder->f%sField->fPathModified = true;\n",folderName[i].Data(),valueName[i][j].Data());
            // Check Modified
            buffer.AppendFormatted("   if (fConfigData[index]->f%sFolder->f%sField->fNameModified ||\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("       fConfigData[index]->f%sFolder->f%sField->fPathModified) {\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("      fConfigData[index]->fFoldersModified = true;\n");
            buffer.AppendFormatted("      fConfigData[index]->f%sFolder->f%sFieldModified = true;\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("      fConfigData[index]->f%sFolderModified = true;\n",folderName[i].Data());
            buffer.AppendFormatted("   }\n");
            buffer.AppendFormatted("   else\n");
            buffer.AppendFormatted("      fConfigData[index]->f%sFolder->f%sFieldModified = false;\n",folderName[i].Data(),valueName[i][j].Data());
         }
      }
   }

   // Global Steering Parameters
   if (numOfSteering[numOfTab]>0) {
      buffer.AppendFormatted("   // global steering parameters\n");
      buffer.AppendFormatted("   fConfigData[index]->fGlobalSteering = new ConfigData::GlobalSteering();\n");
      ROMEString pathT;
      ROMEString pointerT;
      ROMEString classT;
      ROMEString indexT;
      ROMEString blankT;
      Int_t indexCounter = 0;
      pathT.SetFormatted("path+\"/GlobalSteeringParameters");
      pointerT.SetFormatted("fConfigData[index]->fGlobalSteering");
      classT.SetFormatted("ConfigData::GlobalSteering");
      WriteSteeringConfigRead(buffer,0,numOfTab,xml,pathT,pointerT,classT,indexT,blankT,&indexCounter);
   }
   buffer.AppendFormatted("   return kTRUE;\n");
   buffer.AppendFormatted("}\n\n");

   // Set Configuration
   buffer.AppendFormatted("\n// Set Configuration\n");
   buffer.AppendFormatted("Bool_t %sConfig::SetConfiguration(Int_t modIndex,Int_t index) {\n",shortCut.Data());
   buffer.AppendFormatted("   Int_t i;\n");
   Bool_t need_cstop = kTRUE;
/*
   Bool_t need_cstop = kFALSE;
   for (i=0;i<numOfTab;i++) {
      for (j=0;j<numOfSteering[i];j++) {
         for (k=0;k<numOfSteerFields[i][j];k++) {
            if(IsNumber(steerFieldType[i][j][k].Data()))
               need_cstop = kTRUE;
         }
      }
   }
*/

   if(need_cstop)
      buffer.AppendFormatted("   Char_t *cstop;\n");

   // Window
   buffer.AppendFormatted("   if (fConfigData[index]->fWindow->fScaleModified) {\n");
   buffer.AppendFormatted("      gMonitor->SetWindowScale(atof(fConfigData[index]->fWindow->fScale.Data()));\n");
   buffer.AppendFormatted("   }\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fWindow->fStatusBarModified) {\n");
   buffer.AppendFormatted("      if (fConfigData[index]->fWindow->fStatusBar==\"false\")\n");
   buffer.AppendFormatted("         gWindow->SetStatusBarSwitch(kFALSE);\n");
   buffer.AppendFormatted("      else\n");
   buffer.AppendFormatted("         gWindow->SetStatusBarSwitch(kTRUE);\n");
   buffer.AppendFormatted("   }\n");

   // DataBase
   buffer.AppendFormatted("   // database\n");
   buffer.AppendFormatted("   if (index==0) {\n");
   buffer.AppendFormatted("      for (i=0;i<gMonitor->GetNumberOfDataBases();i++) {\n");
   buffer.AppendFormatted("         if (fConfigData[modIndex]->fDataBase[i]->fConnectionModified) {\n");
   buffer.AppendFormatted("            gMonitor->SetDataBaseConnection(i,fConfigData[index]->fDataBase[i]->fConnection.Data());\n");
   buffer.AppendFormatted("         }\n");
   buffer.AppendFormatted("         if (fConfigData[modIndex]->fDataBase[i]->fTypeModified) {\n");
   buffer.AppendFormatted("            if (fConfigData[index]->fDataBase[i]->fType==\"sql\") {\n");
   buffer.AppendFormatted("#if defined( HAVE_SQL )\n");
   buffer.AppendFormatted("               gMonitor->SetDataBase(i,new ROMESQLDataBase());\n");
   buffer.AppendFormatted("               if (!gMonitor->GetDataBase(i)->Init(fConfigData[index]->fDataBase[i]->fName.Data(),\"\",gMonitor->GetDataBaseConnection(i)))\n");
   buffer.AppendFormatted("                  return false;\n");
   buffer.AppendFormatted("#else\n");
   buffer.AppendFormatted("                  cout<<gMonitor->GetProgramName()<<\" is not linked with sql support.\"<<endl;\n");
   buffer.AppendFormatted("                  return false;\n");
   buffer.AppendFormatted("#endif\n");
   buffer.AppendFormatted("            }\n");
   buffer.AppendFormatted("            else if (fConfigData[index]->fDataBase[i]->fType==\"none\" ||\n");
   buffer.AppendFormatted("                     fConfigData[index]->fDataBase[i]->fType==\"\") {\n");
   buffer.AppendFormatted("               gMonitor->SetDataBase(i,new ROMENoDataBase());\n");
   buffer.AppendFormatted("               if (!gMonitor->GetDataBase(i)->Init(fConfigData[index]->fDataBase[i]->fName.Data(),\"\",\"\"))\n");
   buffer.AppendFormatted("                  return false;\n");
   buffer.AppendFormatted("            }\n");
   buffer.AppendFormatted("            else if (fConfigData[index]->fDataBase[i]->fType==\"xml\") {\n");
   buffer.AppendFormatted("               gMonitor->SetDataBase(i,new ROMEXMLDataBase());\n");
   buffer.AppendFormatted("               ROMEString str = gMonitor->GetDataBaseConnection(i);\n");
   buffer.AppendFormatted("               int ind;\n");
   buffer.AppendFormatted("               if ((ind=str.Index(\";\",1,0,TString::kExact))==-1) {\n");
   buffer.AppendFormatted("                  cout<<\"Invalid database connection\"<<endl;\n");
   buffer.AppendFormatted("                  return false;\n");
   buffer.AppendFormatted("               }\n");
   buffer.AppendFormatted("               ROMEString path = str(0,ind);\n");
   buffer.AppendFormatted("               if (path[path.Length()-1]!='/' && path[path.Length()-1]!='\\\\')\n");
   buffer.AppendFormatted("                  path += \"/\";\n");
   buffer.AppendFormatted("               gMonitor->SetDataBaseDir(i,path.Data());\n");
   buffer.AppendFormatted("               if (!gMonitor->GetDataBase(i)->Init(fConfigData[index]->fDataBase[i]->fName.Data(),gMonitor->GetDataBaseDir(i),((TString)str(ind+1,str.Length()-ind-1)).Data()))\n");
   buffer.AppendFormatted("                  return false;\n");
   buffer.AppendFormatted("            }\n");
   buffer.AppendFormatted("            else if (fConfigData[index]->fDataBase[i]->fType==\"text\") {\n");
   buffer.AppendFormatted("               gMonitor->SetDataBase(i,new ROMETextDataBase());\n");
   buffer.AppendFormatted("               if (!gMonitor->GetDataBase(i)->Init(fConfigData[index]->fDataBase[i]->fName.Data(),gMonitor->GetDataBaseConnection(i),\"\"))\n");
   buffer.AppendFormatted("                  return false;\n");
   buffer.AppendFormatted("            }\n");
   buffer.AppendFormatted("            if (fConfigData[index]->fDataBase[i]->fType==\"odb\") {\n");
/*
   buffer.AppendFormatted("               if (gMonitor->isOffline())\n");
   buffer.AppendFormatted("                  gMonitor->SetDataBase(i,new ROMEODBOfflineDataBase());\n");
   buffer.AppendFormatted("               else\n");
*/
   buffer.AppendFormatted("                  gMonitor->SetDataBase(i,new ROMEODBOnlineDataBase());\n");
   buffer.AppendFormatted("               if (!gMonitor->GetDataBase(i)->Init(fConfigData[index]->fDataBase[i]->fName.Data(),\"\",\"\"))\n");
   buffer.AppendFormatted("                  return false;\n");
   buffer.AppendFormatted("            }\n");
   for (i=0;i<numOfDB;i++) {
      buffer.AppendFormatted("            else if (fConfigData[index]->fDataBase[i]->fType==\"%s\") {\n",dbName[i].Data());
      buffer.AppendFormatted("               gMonitor->SetDataBase(i,new %s%sDataBase());\n",shortCut.Data(),dbName[i].Data());
      buffer.AppendFormatted("               if (!gMonitor->GetDataBase(i)->Init(fConfigData[index]->fDataBase[i]->fName.Data(),\"\",gMonitor->GetDataBaseConnection(i)))\n");
      buffer.AppendFormatted("                  return false;\n");
      buffer.AppendFormatted("            }\n");
   }
   buffer.AppendFormatted("         }\n");
   buffer.AppendFormatted("      }\n");
   buffer.AppendFormatted("   }\n");

   // Online
   buffer.AppendFormatted("   // online\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fOnline->fHostModified)\n");
   buffer.AppendFormatted("      gMonitor->SetOnlineHost((Char_t*)fConfigData[index]->fOnline->fHost.Data());\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fOnline->fExperimentModified)\n");
   buffer.AppendFormatted("      gMonitor->SetOnlineExperiment((Char_t*)fConfigData[index]->fOnline->fExperiment.Data());\n");

   // NetFolder
   buffer.AppendFormatted("   // net folders\n");
   for(i=0;i<numOfNetFolder;i++){
      buffer.AppendFormatted("   gMonitor->SetNetFolderName(%d,\"%s\");\n",i,netFolderName[i].Data());
      buffer.AppendFormatted("   gMonitor->SetNetFolderRoot(%d,\"%s\");\n",i,shortCut.Data());
   }
   if(numOfNetFolder>0){
      buffer.AppendFormatted("   for(i=0;i<gMonitor->GetNumberOfNetFolders();i++){\n",i);
      buffer.AppendFormatted("      if (fConfigData[index]->fNetFolderModified[i]){\n");
      buffer.AppendFormatted("         if (fConfigData[index]->fNetFolder[i]->fActiveModified){\n");
      buffer.AppendFormatted("            if(fConfigData[index]->fNetFolder[i]->fActive == \"true\")\n");
      buffer.AppendFormatted("               gMonitor->SetNetFolderActive(i,kTRUE);\n");
      buffer.AppendFormatted("            else\n");
      buffer.AppendFormatted("               gMonitor->SetNetFolderActive(i,kFALSE);\n");
      buffer.AppendFormatted("         }\n");
      buffer.AppendFormatted("         if (fConfigData[index]->fNetFolder[i]->fReconnectModified){\n");
      buffer.AppendFormatted("            if(fConfigData[index]->fNetFolder[i]->fReconnect == \"true\")\n");
      buffer.AppendFormatted("               gMonitor->SetNetFolderReconnect(i,kTRUE);\n");
      buffer.AppendFormatted("            else\n");
      buffer.AppendFormatted("               gMonitor->SetNetFolderReconnect(i,kFALSE);\n");
      buffer.AppendFormatted("         }\n");
      buffer.AppendFormatted("         if (fConfigData[index]->fNetFolder[i]->fHostModified)\n");
      buffer.AppendFormatted("            gMonitor->SetNetFolderHost(i,(Char_t*)fConfigData[index]->fNetFolder[i]->fHost.Data());\n");
      buffer.AppendFormatted("         if (fConfigData[index]->fNetFolder[i]->fPortModified)\n");
      buffer.AppendFormatted("            gMonitor->SetNetFolderPort(i,(Char_t*)fConfigData[index]->fNetFolder[i]->fPort.Data());\n");
      buffer.AppendFormatted("         if (fConfigData[index]->fNetFolder[i]->fRootModified)\n");
      buffer.AppendFormatted("            gMonitor->SetNetFolderRoot(i,(Char_t*)fConfigData[index]->fNetFolder[i]->fRoot.Data());\n");
      buffer.AppendFormatted("      }\n");
      buffer.AppendFormatted("   }\n");
   }

   // Tabs
   buffer.AppendFormatted("   // tabs\n");
   for (i=0;i<numOfTab;i++) {
      buffer.AppendFormatted("   // %s tab\n",tabName[i].Data());
      Int_t index = i;
      pointer.Resize(0);
      while (index!=-1) {
         pointer.InsertFormatted(0,"->f%sTab",tabName[index].Data());
         index = tabParentIndex[index];
      }
      ROMEString switchString = tabName[i].Data();
      index = tabParentIndex[i];
      while (index!=-1) {
         switchString.Insert(0,"_");
         switchString.Insert(0,tabName[index].Data());
         index = tabParentIndex[index];
      }
      buffer.AppendFormatted("   if (fConfigData[index]%s->fActiveModified) {\n",pointer.Data());
      buffer.AppendFormatted("      if (fConfigData[index]%s->fActive==\"false\")\n",pointer.Data());
      buffer.AppendFormatted("         gWindow->GetTabSwitches()->%s = kFALSE;\n",switchString.Data());
      buffer.AppendFormatted("      else\n");
      buffer.AppendFormatted("         gWindow->GetTabSwitches()->%s = kTRUE;\n",switchString.Data());
      buffer.AppendFormatted("   }\n");
      // Steering parameter
      if (numOfSteering[i]>0) {
         buffer.AppendFormatted("   // steering parameters\n");
         ROMEString pointerT;
         ROMEString steerPointerT;
         ROMEString blankT;
         Int_t indexCounter = 0;
         pointerT.SetFormatted("%s->fSteering",pointer.Data());
         steerPointerT.SetFormatted("((%sT%s*) gWindow->Get%s%03dTab())->GetSP()",shortCut.Data(),tabName[i].Data(),tabName[i].Data(),i);
         WriteSteeringConfigSet(buffer,0,i,pointerT,steerPointerT,blankT,&indexCounter);
      }
   }
   for (i=0;i<numOfTab;i++) {
      Int_t index = tabParentIndex[i];
      ROMEString switchString = tabName[i].Data();
      while (index!=-1) {
         switchString.Insert(0,"_");
         switchString.Insert(0,tabName[index].Data());
         index = tabParentIndex[index];
      }
      buffer.AppendFormatted("   // %s tab enabled hierarchy\n",tabName[i].Data());
      buffer.AppendFormatted("   gWindow->GetTabSwitches()->%s = gWindow->GetTabSwitches()->%s ",switchString.Data(),switchString.Data());
      index = tabParentIndex[i];
      while (index!=-1) {
         Int_t index2 = tabParentIndex[index];
         ROMEString switchString2 = tabName[index].Data();
         while (index2!=-1) {
            switchString2.Insert(0,"_");
            switchString2.Insert(0,tabName[index2].Data());
            index2 = tabParentIndex[index2];
         }
         buffer.AppendFormatted(" * gWindow->GetTabSwitches()->%s",switchString2.Data());
         index = tabParentIndex[index];
      }
      buffer.AppendFormatted(";\n");
   }

   // Folders
   buffer.AppendFormatted("   // folders\n");
   for (i=0;i<numOfFolder;i++) {
      if (folderDataBase[i]) {
         buffer.AppendFormatted("   ROMEString path;\n");
         buffer.AppendFormatted("   ROMEString subPath;\n");
         break;
      }
   }
   for (i=0;i<numOfFolder;i++) {
      if (folderDataBase[i] && !folderSupport[i]) {
         buffer.AppendFormatted("   // %s folder\n",folderName[i].Data());
         for (j=0;j<numOfValue[i];j++) {
            if(valueDimension[i][j]>1)
               continue;
            buffer.AppendFormatted("   // %s field\n",valueName[i][j].Data());
            // Name
            buffer.AppendFormatted("   if (fConfigData[modIndex]->f%sFolder->f%sField->fNameModified)\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("      gMonitor->Set%s_%sDBName(fConfigData[modIndex]->f%sFolder->f%sField->fName.Data());\n",folderName[i].Data(),valueName[i][j].Data(),folderName[i].Data(),valueName[i][j].Data());
            // Path
            buffer.AppendFormatted("   if (fConfigData[modIndex]->f%sFolder->f%sField->fPathModified) {\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("      path = fConfigData[modIndex]->f%sFolder->f%sField->fPath.Data();\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("      int ind = path.Last('\"');\n");
            buffer.AppendFormatted("      if (ind==-1 || ind==path.Length()-1) {\n");
            buffer.AppendFormatted("         subPath = path.ReplaceAll(\"\\\"\",\"\");\n");
            buffer.AppendFormatted("         gMonitor->Set%s_%sDBPath(subPath.Data());\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("      }\n");
            buffer.AppendFormatted("      else {\n");
            buffer.AppendFormatted("         subPath = path(1,ind-1);\n");
            buffer.AppendFormatted("         gMonitor->Set%s_%sDBPath(subPath.Data());\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("         path = path(ind+2,path.Length()-ind+2);\n");
            buffer.AppendFormatted("         int num = path.CountChar(',')+1;\n");
            buffer.AppendFormatted("         for (i=0;i<num;i++) {\n");
            buffer.AppendFormatted("            if (i<num-1)\n");
            buffer.AppendFormatted("               ind = path.First(',');\n");
            buffer.AppendFormatted("            else\n");
            buffer.AppendFormatted("               ind = path.Length();\n");
            buffer.AppendFormatted("            subPath = path(0,ind);\n");
            buffer.AppendFormatted("            gMonitor->Set%s_%sDBCodeAt(i,gMonitor->GetObjectInterpreterCode(subPath.Data()));\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("            path = path(ind+1,path.Length()-ind+1);\n");
            buffer.AppendFormatted("         }\n");
            buffer.AppendFormatted("      }\n");
            buffer.AppendFormatted("   }\n");
         }
      }
   }

   // Global Steering Parameter
   buffer.AppendFormatted("   // global steering parameters\n");
   if (numOfSteering[numOfTab]>0) {
      ROMEString pointerT;
      ROMEString steerPointerT;
      ROMEString blankT;
      Int_t indexCounter = 0;
      pointerT.SetFormatted("->fGlobalSteering");
      steerPointerT.SetFormatted("gMonitor->GetGSP()");
      WriteSteeringConfigSet(buffer,0,numOfTab,pointerT,steerPointerT,blankT,&indexCounter);
   }
   buffer.AppendFormatted("   return kTRUE;\n");
   buffer.AppendFormatted("}\n\n");

   // Write Configuration File
   buffer.AppendFormatted("\n// Write Configuration File\n");
   buffer.AppendFormatted("Bool_t %sConfig::WriteConfigurationFile(const Char_t *file) {\n",shortCut.Data());
   buffer.AppendFormatted("   fXMLFile = file;\n");
   buffer.AppendFormatted("   ROMEXML *xml = new ROMEXML();\n");
   buffer.AppendFormatted("   ROMEString str;\n");
   buffer.AppendFormatted("   if (!xml->OpenFileForWrite(fXMLFile))\n");
   buffer.AppendFormatted("      return kFALSE;\n");
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("   xml->StartElement(\"Configuration\");\n");
   buffer.AppendFormatted("   WriteConfiguration(xml,0);\n");
   buffer.AppendFormatted("   xml->EndElement();\n");
   buffer.AppendFormatted("   xml->EndDocument();\n");
   buffer.AppendFormatted("   delete xml;\n");
   buffer.AppendFormatted("   return kTRUE;\n");
   buffer.AppendFormatted("}\n");

   // Write Configuration
   buffer.AppendFormatted("\n// Write Configuration\n");
   buffer.AppendFormatted("Bool_t %sConfig::WriteConfiguration(ROMEXML *xml,Int_t index) {\n",shortCut.Data());
   buffer.AppendFormatted("   Int_t i;\n");
   buffer.AppendFormatted("   ROMEString str = \"\";\n");

   // Window
   buffer.AppendFormatted("   // window\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fWindowModified || index==0) {\n");
   buffer.AppendFormatted("      xml->StartElement(\"Window\");\n");
   // Window/Scale
   buffer.AppendFormatted("      if (index==0){\n");
   buffer.AppendFormatted("         str.SetFormatted(\"%%2.1f\",gMonitor->GetWindowScale());\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Scale\",(Char_t*)str.Data());\n");
   buffer.AppendFormatted("      }\n");
   buffer.AppendFormatted("      else if (fConfigData[index]->fWindow->fScaleModified)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Scale\",(Char_t*)fConfigData[index]->fWindow->fScale.Data());\n");
   // Window/StatusBar
   buffer.AppendFormatted("      if (index==0){\n");
   buffer.AppendFormatted("         if(gWindow->GetStatusBarSwitch())\n");
   buffer.AppendFormatted("            str.SetFormatted(\"true\");\n");
   buffer.AppendFormatted("         else\n");
   buffer.AppendFormatted("            str.SetFormatted(\"false\");\n");
   buffer.AppendFormatted("         xml->WriteElement(\"StatusBar\",(Char_t*)str.Data());\n");
   buffer.AppendFormatted("      }\n");
   buffer.AppendFormatted("      else if (fConfigData[index]->fWindow->fStatusBarModified){\n");
   buffer.AppendFormatted("         if(gWindow->GetStatusBarSwitch())\n");
   buffer.AppendFormatted("            str.SetFormatted(\"true\");\n");
   buffer.AppendFormatted("         else\n");
   buffer.AppendFormatted("            str.SetFormatted(\"false\");\n");
   buffer.AppendFormatted("         xml->WriteElement(\"StatusBar\",(Char_t*)str.Data());\n");
   buffer.AppendFormatted("      }\n");
   buffer.AppendFormatted("      xml->EndElement();\n");
   buffer.AppendFormatted("   }\n");

   // DataBase
   buffer.AppendFormatted("   // database\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fDataBasesModified && index==0) {\n");
   buffer.AppendFormatted("      xml->StartElement(\"DataBases\");\n");
   buffer.AppendFormatted("      for (i=0;i<gMonitor->GetNumberOfDataBases();i++) {\n");
   buffer.AppendFormatted("         if (fConfigData[index]->fDataBaseModified[i]) {\n");
   buffer.AppendFormatted("            xml->StartElement(\"DataBase\");\n");
   // Name
   buffer.AppendFormatted("            xml->WriteElement(\"Name\",gMonitor->GetDataBase(i)->GetName());\n");
   // Type
   buffer.AppendFormatted("            xml->WriteElement(\"Type\",gMonitor->GetDataBase(i)->GetType());\n");
   // Connection
   buffer.AppendFormatted("            xml->WriteElement(\"Connection\",gMonitor->GetDataBaseConnection(i));\n");
   buffer.AppendFormatted("            xml->EndElement();\n");
   buffer.AppendFormatted("         }\n");
   buffer.AppendFormatted("      }\n");
   buffer.AppendFormatted("      xml->EndElement();\n");
   buffer.AppendFormatted("   }\n");

   // Online
   buffer.AppendFormatted("   // online\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fOnlineModified || index==0) {\n");
   buffer.AppendFormatted("      xml->StartElement(\"Online\");\n");
   // Online/Host
   buffer.AppendFormatted("      if (index==0)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Host\",gMonitor->GetOnlineHost());\n");
   buffer.AppendFormatted("      else if (fConfigData[index]->fOnline->fHostModified)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Host\",(Char_t*)fConfigData[index]->fOnline->fHost.Data());\n");
   // Online/Experiment
   buffer.AppendFormatted("      if (index==0)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Experiment\",gMonitor->GetOnlineExperiment());\n");
   buffer.AppendFormatted("      else if (fConfigData[index]->fOnline->fExperimentModified)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Experiment\",(Char_t*)fConfigData[index]->fOnline->fExperiment.Data());\n");
   buffer.AppendFormatted("      xml->EndElement();\n");
   buffer.AppendFormatted("   }\n");

   // NetFolder
   if(numOfNetFolder>0){
      buffer.AppendFormatted("   // NetFolder\n");
      buffer.AppendFormatted("   if (fConfigData[index]->fNetFoldersModified || index==0){\n");
      buffer.AppendFormatted("      xml->StartElement(\"NetFolders\");\n");
      for(i=0;i<numOfNetFolder;i++){
         buffer.AppendFormatted("      if (fConfigData[index]->fNetFolderModified[%d] || index==0){\n",i);
         buffer.AppendFormatted("         xml->StartElement(\"%s\");\n",netFolderName[i].Data());
         // NetFolder/Active
         buffer.AppendFormatted("         if (index==0){\n");
         buffer.AppendFormatted("            if(gMonitor->GetNetFolderActive(%d))\n",i);
         buffer.AppendFormatted("               xml->WriteElement(\"Active\",\"true\");\n");
         buffer.AppendFormatted("            else\n",i);
         buffer.AppendFormatted("               xml->WriteElement(\"Active\",\"false\");\n");
         buffer.AppendFormatted("         }\n");
         buffer.AppendFormatted("         else if (fConfigData[index]->fNetFolder[%d]->fActiveModified)\n",i);
         buffer.AppendFormatted("            xml->WriteElement(\"Active\",(Char_t*)fConfigData[index]->fNetFolder[%d]->fActive.Data());\n",i);
         // NetFolder/Reconnect
         buffer.AppendFormatted("         if (index==0){\n");
         buffer.AppendFormatted("            if(gMonitor->GetNetFolderReconnect(%d))\n",i);
         buffer.AppendFormatted("               xml->WriteElement(\"Reconnect\",\"true\");\n");
         buffer.AppendFormatted("            else\n",i);
         buffer.AppendFormatted("               xml->WriteElement(\"Reconnect\",\"false\");\n");
         buffer.AppendFormatted("         }\n");
         buffer.AppendFormatted("         else if (fConfigData[index]->fNetFolder[%d]->fReconnectModified)\n",i);
         buffer.AppendFormatted("            xml->WriteElement(\"Reconnect\",(Char_t*)fConfigData[index]->fNetFolder[%d]->fReconnect.Data());\n",i);
         // NetFolder/Host
         buffer.AppendFormatted("         if (index==0)\n");
         buffer.AppendFormatted("            xml->WriteElement(\"Host\",gMonitor->GetNetFolderHost(%d));\n",i);
         buffer.AppendFormatted("         else if (fConfigData[index]->fNetFolder[%d]->fHostModified)\n",i);
         buffer.AppendFormatted("            xml->WriteElement(\"Host\",(Char_t*)fConfigData[index]->fNetFolder[%d]->fHost.Data());\n",i);
         // NetFolder/Port
         buffer.AppendFormatted("         if (index==0){\n");
         buffer.AppendFormatted("            str.SetFormatted(\"%%d\",gMonitor->GetNetFolderPort(%d));\n",i);
         buffer.AppendFormatted("            xml->WriteElement(\"Port\",(Char_t*)str.Data());\n");
         buffer.AppendFormatted("         }\n");
         buffer.AppendFormatted("         else if (fConfigData[index]->fNetFolder[%d]->fPortModified)\n",i);
         buffer.AppendFormatted("            xml->WriteElement(\"Port\",(Char_t*)fConfigData[index]->fNetFolder[%d]->fPort.Data());\n",i);
         // NetFolder/Root
         buffer.AppendFormatted("         if (index==0)\n");
         buffer.AppendFormatted("            xml->WriteElement(\"Root\",gMonitor->GetNetFolderRoot(%d));\n",i);
         buffer.AppendFormatted("         else if (fConfigData[index]->fNetFolder[%d]->fRootModified)\n",i);
         buffer.AppendFormatted("            xml->WriteElement(\"Root\",(Char_t*)fConfigData[index]->fNetFolder[%d]->fRoot.Data());\n",i);

         buffer.AppendFormatted("         xml->EndElement();\n");
         buffer.AppendFormatted("      }\n");
      }
      buffer.AppendFormatted("      xml->EndElement();\n");
      buffer.AppendFormatted("   }\n");
   }

   // Tabs
   buffer.AppendFormatted("   // tabs\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fTabsModified || index==0) {\n");
   buffer.AppendFormatted("      xml->StartElement(\"Tabs\");\n");
   pointer.Resize(0);
   WriteTabConfigWrite(buffer,-1,pointer,0);
   buffer.AppendFormatted("      xml->EndElement();\n");
   buffer.AppendFormatted("   }\n");

   // Folders
   buffer.AppendFormatted("   // folders\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fFoldersModified) {\n");
   buffer.AppendFormatted("      xml->StartElement(\"Folders\");\n");
   for (i=0;i<numOfFolder;i++) {
      if (folderDataBase[i] && !folderSupport[i]) {
         buffer.AppendFormatted("      if (fConfigData[index]->f%sFolderModified) {\n",folderName[i].Data());
         buffer.AppendFormatted("         // %s folder\n",folderName[i].Data());
         buffer.AppendFormatted("         xml->StartElement(\"Folder\");\n");
         buffer.AppendFormatted("         xml->WriteElement(\"FolderName\",\"%s\");\n",folderName[i].Data());
         for (j=0;j<numOfValue[i];j++) {
            if(valueDimension[i][j]>1)
               continue;
            buffer.AppendFormatted("         if (fConfigData[index]->f%sFolder->f%sFieldModified) {\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("            // %s field\n",valueName[i][j].Data());
            buffer.AppendFormatted("            xml->StartElement(\"Field\");\n");
            buffer.AppendFormatted("            xml->WriteElement(\"FieldName\",\"%s\");\n",valueName[i][j].Data());
            // name
            buffer.AppendFormatted("            if (fConfigData[index]->f%sFolder->f%sField->fNameModified)\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("               xml->WriteElement(\"DataBaseName\",fConfigData[index]->f%sFolder->f%sField->fName.Data());\n",folderName[i].Data(),valueName[i][j].Data());
            // path
            buffer.AppendFormatted("            if (fConfigData[index]->f%sFolder->f%sField->fNameModified)\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("               xml->WriteElement(\"DataBasePath\",fConfigData[index]->f%sFolder->f%sField->fPath.Data());\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("            xml->EndElement();\n");
            buffer.AppendFormatted("         }\n");
         }
         buffer.AppendFormatted("         xml->EndElement();\n");
         buffer.AppendFormatted("      }\n");
      }
   }
   buffer.AppendFormatted("      xml->EndElement();\n");
   buffer.AppendFormatted("   }\n");

   // Global Steering Parameter
   buffer.AppendFormatted("   // global steering parameters\n");
   if (numOfSteering[numOfTab]>0) {
      buffer.AppendFormatted("   if (fConfigData[index]->fGlobalSteeringModified || index==0) {\n");
      buffer.AppendFormatted("      ROMEString value;\n");
      buffer.AppendFormatted("      xml->StartElement(\"GlobalSteeringParameters\");\n");
      ROMEString pointerT;
      ROMEString steerPointerT;
      Int_t indexCounter = 0;
      pointerT.SetFormatted("fConfigData[index]->fGlobalSteering");
      steerPointerT.SetFormatted("gMonitor->GetGSP()");
      WriteSteeringConfigWrite(buffer,0,numOfTab,pointerT,steerPointerT,1,&indexCounter);
   }
   if (numOfSteering[numOfTab]>0) {
      buffer.AppendFormatted("      xml->EndElement();\n");
      buffer.AppendFormatted("   }\n");
   }
   buffer.AppendFormatted("   return kTRUE;\n");
   buffer.AppendFormatted("}\n");
   // Close cpp-File
   WriteFile(cppFile.Data(),buffer.Data(),6);
   return kTRUE;
}


Bool_t ArgusBuilder::WriteConfigH() {
   Int_t i,j;
   ROMEString hFile;
   ROMEString buffer;
   // File name
   hFile.SetFormatted("%s/include/framework/%sConfig.h",outDir.Data(),shortCut.Data());

   // Description
   buffer.Resize(0);
   buffer.AppendFormatted("////////////////////////////////////////////////////////////////////////////////\n");
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("// This file has been generated by the ArgusBuilder.                          //\n");
   buffer.AppendFormatted("// Manual changes to this file will always be overwritten by the builder.     //\n");
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("////////////////////////////////////////////////////////////////////////////////\n\n");

   // Header
   buffer.AppendFormatted("#ifndef %sConfig_H\n",shortCut.Data());
   buffer.AppendFormatted("#define %sConfig_H\n\n",shortCut.Data());
   buffer.AppendFormatted("#include <ROMEString.h>\n");
   buffer.AppendFormatted("#ifndef __CINT__\n");
   buffer.AppendFormatted("#include <ROMEXML.h>\n");
   buffer.AppendFormatted("#endif\n");
   buffer.AppendFormatted("#include <ArgusConfig.h>\n");

   // Class
   buffer.AppendFormatted("\nclass %sConfig : public ArgusConfig\n",shortCut.Data());
   buffer.AppendFormatted("{\n");
   buffer.AppendFormatted("#ifndef __CINT__\n");

   // sub classes
   buffer.AppendFormatted("protected:\n");
   buffer.AppendFormatted("   class ConfigData\n");
   buffer.AppendFormatted("   {\n");
   buffer.AppendFormatted("   public:\n");
   buffer.AppendFormatted("\n");

   // window
   buffer.AppendFormatted("      // window;\n");
   buffer.AppendFormatted("      class Window {\n");
   buffer.AppendFormatted("      public:\n");
   buffer.AppendFormatted("         ROMEString       fScale;\n");
   buffer.AppendFormatted("         Bool_t           fScaleModified;\n");
   buffer.AppendFormatted("         ROMEString       fStatusBar;\n");
   buffer.AppendFormatted("         Bool_t           fStatusBarModified;\n");
   buffer.AppendFormatted("      };\n");
   buffer.AppendFormatted("      Window*          fWindow;\n");
   buffer.AppendFormatted("      Bool_t           fWindowModified;\n");

   // database
   buffer.AppendFormatted("      // database;\n");
   buffer.AppendFormatted("      class DataBase {\n");
   buffer.AppendFormatted("      public:\n");
   buffer.AppendFormatted("         ROMEString    fName;\n");
   buffer.AppendFormatted("         bool          fNameModified;\n");
   buffer.AppendFormatted("         ROMEString    fType;\n");
   buffer.AppendFormatted("         bool          fTypeModified;\n");
   buffer.AppendFormatted("         ROMEString    fConnection;\n");
   buffer.AppendFormatted("         bool          fConnectionModified;\n");
   buffer.AppendFormatted("      };\n");
   buffer.AppendFormatted("      DataBase       **fDataBase;\n");
   buffer.AppendFormatted("      bool            *fDataBaseModified;\n");
   buffer.AppendFormatted("      bool             fDataBasesModified;\n");

   // online
   buffer.AppendFormatted("      // online;\n");
   buffer.AppendFormatted("      class Online {\n");
   buffer.AppendFormatted("      public:\n");
   buffer.AppendFormatted("         ROMEString       fHost;\n");
   buffer.AppendFormatted("         Bool_t           fHostModified;\n");
   buffer.AppendFormatted("         ROMEString       fExperiment;\n");
   buffer.AppendFormatted("         Bool_t           fExperimentModified;\n");
   buffer.AppendFormatted("      };\n");
   buffer.AppendFormatted("      Online*          fOnline;\n");
   buffer.AppendFormatted("      Bool_t           fOnlineModified;\n");
   buffer.AppendFormatted("\n");

   // NetFolder
   buffer.AppendFormatted("      // NetFolder;\n");
   buffer.AppendFormatted("      class NetFolder {\n");
   buffer.AppendFormatted("      public:\n");
   buffer.AppendFormatted("         ROMEString       fActive;\n");
   buffer.AppendFormatted("         Bool_t           fActiveModified;\n");
   buffer.AppendFormatted("         ROMEString       fReconnect;\n");
   buffer.AppendFormatted("         Bool_t           fReconnectModified;\n");
   buffer.AppendFormatted("         ROMEString       fRoot;\n");
   buffer.AppendFormatted("         Bool_t           fRootModified;\n");
   buffer.AppendFormatted("         ROMEString       fHost;\n");
   buffer.AppendFormatted("         Bool_t           fHostModified;\n");
   buffer.AppendFormatted("         ROMEString       fPort;\n");
   buffer.AppendFormatted("         Bool_t           fPortModified;\n");
   buffer.AppendFormatted("      };\n");
   if(numOfNetFolder>0){
      buffer.AppendFormatted("      NetFolder*       fNetFolder[%d];\n",numOfNetFolder);
      buffer.AppendFormatted("      Bool_t           fNetFolderModified[%d];\n",numOfNetFolder);
      buffer.AppendFormatted("      Bool_t           fNetFoldersModified;\n");
   }
   buffer.AppendFormatted(" \n");

   // tabs
   buffer.AppendFormatted("      // tabs\n");
   WriteTabConfigClass(buffer,-1,0);
   buffer.AppendFormatted("      Bool_t           fTabsModified;\n");
   buffer.AppendFormatted("\n");

   // folders
   buffer.AppendFormatted("      // folders\n");
   for (i=0;i<numOfFolder;i++) {
      if (folderDataBase[i] && !folderSupport[i]) {
         buffer.AppendFormatted("      class %sFolder {\n",folderName[i].Data());
         buffer.AppendFormatted("      public:\n");
         for (j=0;j<numOfValue[i];j++) {
            if(valueDimension[i][j]>1)
               continue;
            buffer.AppendFormatted("         class %sField {\n",valueName[i][j].Data());
            buffer.AppendFormatted("         public:\n");
            buffer.AppendFormatted("            ROMEString  fName;\n");
            buffer.AppendFormatted("            bool        fNameModified;\n");
            buffer.AppendFormatted("            ROMEString  fPath;\n");
            buffer.AppendFormatted("            bool        fPathModified;\n");
            buffer.AppendFormatted("         };\n");
            buffer.AppendFormatted("         %sField *f%sField;\n",valueName[i][j].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("         bool   f%sFieldModified;\n",valueName[i][j].Data());
         }
         buffer.AppendFormatted("         %sFolder() {\n",folderName[i].Data());
         for (j=0;j<numOfValue[i];j++) {
            if(valueDimension[i][j]>1)
               continue;
            buffer.AppendFormatted("            f%sFieldModified = false;\n",valueName[i][j].Data());
            buffer.AppendFormatted("            f%sField = new %sField();\n",valueName[i][j].Data(),valueName[i][j].Data());
         }
         buffer.AppendFormatted("         };\n");
         buffer.AppendFormatted("      };\n");
         buffer.AppendFormatted("      %sFolder *f%sFolder;\n",folderName[i].Data(),folderName[i].Data());
         buffer.AppendFormatted("      bool   f%sFolderModified;\n",folderName[i].Data());
      }
   }
   buffer.AppendFormatted("      bool   fFoldersModified;\n");

   // steering parameters
   buffer.AppendFormatted("      // global steering parameters\n");
   buffer.AppendFormatted("      class GlobalSteering {\n");
   buffer.AppendFormatted("      public:\n");
   if (numOfSteering[numOfTab]>0) {
      WriteSteeringConfigClass(buffer,0,numOfTab,2);
   }
   buffer.AppendFormatted("      };\n");
   buffer.AppendFormatted("      GlobalSteering*  fGlobalSteering;\n");
   buffer.AppendFormatted("      Bool_t           fGlobalSteeringModified;\n");
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("   public:\n");

   // Constructor
   buffer.AppendFormatted("      ConfigData() {\n");
   buffer.AppendFormatted("         fDataBasesModified        = kFALSE;\n");
   buffer.AppendFormatted("         fOnlineModified           = kFALSE;\n");
   buffer.AppendFormatted("         fTabsModified             = kFALSE;\n");
   if(numOfNetFolder>0)
      buffer.AppendFormatted("         fNetFoldersModified       = kFALSE;\n");
   for (i=0;i<numOfTab;i++) {
      if( tabParentIndex[i] != -1 )
         continue;
      buffer.AppendFormatted("         f%sTabModified = kFALSE;\n",tabName[i].Data());
      buffer.AppendFormatted("         f%sTab         = new %sTab();\n",tabName[i].Data(),tabName[i].Data());
   }
   for (i=0;i<numOfFolder;i++) {
      if (folderDataBase[i] && !folderSupport[i]) {
         buffer.AppendFormatted("         f%sFolderModified = false;\n",folderName[i].Data());
         buffer.AppendFormatted("         f%sFolder = new %sFolder();\n",folderName[i].Data(),folderName[i].Data());
      }
   }
   if (numOfSteering[numOfTab]>0) {
      buffer.AppendFormatted("         fGlobalSteeringModified  = kFALSE;\n");
      buffer.AppendFormatted("         fGlobalSteering          = new GlobalSteering();\n");
   }
   buffer.AppendFormatted("      };\n");
   buffer.AppendFormatted("   };\n");
   buffer.AppendFormatted("\n");

   // Fields
   buffer.AppendFormatted("   ConfigData**        fConfigData;\n");
   buffer.AppendFormatted("   ROMEString          fXMLFile;\n");
   buffer.AppendFormatted("\n");

   // Methods
   buffer.AppendFormatted("public:\n");
   // Constructor
   buffer.AppendFormatted("   %sConfig();\n",shortCut.Data());

   // methods
   buffer.AppendFormatted("   Bool_t WriteConfigurationFile(const Char_t *file);\n");
   buffer.AppendFormatted("   Bool_t ReadConfigurationFile(const Char_t *file);\n");
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("protected:\n");
   buffer.AppendFormatted("   Bool_t ReadConfiguration(ROMEXML *xml,ROMEString& path,Int_t index);\n");
   buffer.AppendFormatted("   Bool_t WriteConfiguration(ROMEXML *xml,Int_t index);\n");
   buffer.AppendFormatted("   Bool_t SetConfiguration(Int_t modIndex = 0,Int_t index = 0);\n");
   buffer.AppendFormatted("\n");

   // Footer
   buffer.AppendFormatted("#endif\n");
   buffer.AppendFormatted("};\n\n");
   buffer.AppendFormatted("#endif   // %sConfig_H\n",shortCut.Data());

   // Write File
   WriteFile(hFile.Data(),buffer.Data(),6);
   return kTRUE;
}
