/********************************************************************

  BuilderMonitor.cpp, Ryu Sawada

  $Id$

********************************************************************/
#include "ArgusBuilder.h"

Bool_t ArgusBuilder::WriteMonitorCpp()
{
   Int_t i;
   ROMEString cppFile;
   ROMEString buffer;
   ROMEString parentt;
   ROMEString buf;
   Int_t lenTot, j, k, ll;
   Int_t iFold;
   Char_t *pos;
   ROMEString classDescription;
   classDescription.SetFormatted("Basic class for the %s%s. This class creates and manages all folders.", shortCut.Data(), mainProgName.Data());
   ROMEString tmp;
   ROMEString format;

   Int_t nameLen = -1;
   Int_t scl = shortCut.Length();
   for (i = 0; i < numOfFolder; i++) {
      if (!folderSupport[i]) {
         nameLen = TMath::Max(nameLen, static_cast<Int_t>(folderName[i].Length() + scl + strlen("Folder")));
      }
   }

   // File name
   cppFile.SetFormatted("%s/src/framework/%sMonitor.cpp", outDir.Data(), shortCut.Data());
   // Description
   buffer.AppendFormatted("//// Author: %s\n", mainAuthor.Data());
   buffer.AppendFormatted("////////////////////////////////////////////////////////////////////////////////\n");
   buffer.AppendFormatted("//                                                                            //\n");
   ll = 74 - shortCut.Length();
   format.SetFormatted("// %%s%%-%d.%ds //\n", ll, ll);
   buffer.AppendFormatted(const_cast<Char_t *>(format.Data()), shortCut.Data(), "Monitor");
   format.Resize(0);
   buffer.AppendFormatted("//                                                                            //\n");
   pos = const_cast<Char_t*>(classDescription.Data());
   lenTot = classDescription.Length();
   while (pos - classDescription.Data() < lenTot) {
      if (lenTot + (classDescription.Data() - pos) < 74)
         i = lenTot + (classDescription.Data() - pos);
      else
         for (i = 74; pos[i] != 32 && i > 0; i--) {
         }
      if (i <= 0)
         i = TMath::Min(75, lenTot);
      pos[i] = 0;
      buffer.AppendFormatted("// %-74.74s   \n", pos);
      pos = pos + i + 1;
   }
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("// This file has been generated by the ArgusBuilder.                          //\n");
   buffer.AppendFormatted("// Manual changes to this file will always be overwritten by the builder.     //\n");
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("////////////////////////////////////////////////////////////////////////////////\n\n");

   // Header
   buffer.AppendFormatted("#include \"include/framework/%sMonitor.h\"\n", shortCut.Data());
   buffer.AppendFormatted("#include \"include/framework/%sWindow.h\"\n", shortCut.Data());
   buffer.AppendFormatted("#include \"include/framework/%sConfig.h\"\n", shortCut.Data());
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("ClassImp(%sMonitor);\n", shortCut.Data());
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("%sMonitor *gMonitor;  // global Monitor Handle\n", shortCut.Data());
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("#if defined( R__VISUAL_CPLUSPLUS )\n");
   buffer.AppendFormatted("#include <windows.h>\n");
   buffer.AppendFormatted("#endif\n");
   buffer.AppendFormatted("\n");

   // Constructor
   buffer.AppendFormatted("%sMonitor::%sMonitor(TApplication *app):ArgusMonitor(app) {\n", shortCut.Data(), shortCut.Data());
   buffer.AppendFormatted("   Int_t i;\n");
   buffer.AppendFormatted("   gPassToArgus = static_cast<void*>(this); // Pass the handle to the monitor\n");
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("   fConfiguration = new %sConfig();\n", shortCut.Data());
   buffer.AppendFormatted("\n");

   // Steering
   if (numOfSteering[numOfTab] > 0) {
      buffer.AppendFormatted("   fGlobalSteeringParameters = new %sGlobalSteering();\n", shortCut.Data());
   }
   // Folder
   buffer.AppendFormatted("   // Folder initialisation\n");
   buffer.AppendFormatted("   fMainFolder = gROOT->GetRootFolder()->AddFolder(\"%s\",\"Root Folder of %s%s\");\n", shortCut.Data(), shortCut.Data(), mainProgName.Data());
   buffer.AppendFormatted("   gROOT->GetListOfBrowsables()->Add(fMainFolder,\"%s\");\n\n", shortCut.Data());
   for (i = 0; i < numOfFolder; i++) {
      if (!folderSupport[i]) {
         if (folderParentName[i] == "GetMainFolder()")
            parentt = folderParentName[i];
         else
            parentt.SetFormatted("%sFolder", folderParentName[i].Data());
         format.SetFormatted("   TFolder* %%sFolder%%%ds = %%s->AddFolder(\"%%s\",\"%%s\");\n", nameLen - folderName[i].Length() - scl - strlen("Folder"));
         buffer.AppendFormatted(const_cast<Char_t*>(format.Data()), folderName[i].Data(), "", parentt.Data(), folderName[i].Data(), folderTitle[i].Data());
      }
   }
   for (i = 0; i < numOfFolder; i++) {
      if (!folderSupport[i]) {
         if (numOfValue[i] > 0) {
            if (folderArray[i] == "1") {
               buffer.AppendFormatted("\n   f%sFolder = new %s%s();\n", folderName[i].Data(), shortCut.Data(), folderName[i].Data());
               buffer.AppendFormatted("   %sFolder->Add(f%sFolder);\n", folderName[i].Data(), folderName[i].Data());
            }
            else {
               buffer.AppendFormatted("\n   f%sFolders = new TClonesArray(\"%s%s\");\n", folderName[i].Data(), shortCut.Data(), folderName[i].Data());
               buffer.AppendFormatted("   %sFolder->Add(f%sFolders);\n", folderName[i].Data(), folderName[i].Data());
            }
         }
      }
   }

   buffer.AppendFormatted("   fProgramName = \"%s%s\";\n", shortCut.Data(), mainProgName.Data());
   buffer.AppendFormatted("   InitNetFolders(%d);\n", numOfNetFolder);

   // NetFolder
   buffer.AppendFormatted("   fNumberOfNetFolders = %d;\n", numOfNetFolder);
   for (i = 0; i < numOfNetFolder; i++) {
      buffer.AppendFormatted("\n");
      buffer.AppendFormatted("   // %s\n", netFolderName[i].Data());
      buffer.AppendFormatted("   fNetFolderName[%d]   = \"%s\";\n", i, netFolderName[i].Data());
      buffer.AppendFormatted("   fNetFolderActive[%d] = kFALSE;\n", i);
      buffer.AppendFormatted("   fNetFolderReconnect[%d] = kTRUE;\n", i);
      buffer.AppendFormatted("   fNetFolder[%d]       = 0;\n", i);
      buffer.AppendFormatted("   fNetFolderSocket[%d] = 0;\n", i);
      if (netFolderHost[i].Length())
         buffer.AppendFormatted("   fNetFolderHost[%d]   = \"%s\";\n", i, netFolderHost[i].Data());
      else
         buffer.AppendFormatted("   fNetFolderHost[%d]   = \"localhost\";\n", i);
      if (netFolderPort[i].Length())
         buffer.AppendFormatted("   fNetFolderPort[%d]   = %s;\n", i, netFolderPort[i].Data());
      else
         buffer.AppendFormatted("   fNetFolderPort[%d]   = 9090;\n", i);
      if (netFolderRoot[i].Length())
         buffer.AppendFormatted("   fNetFolderRoot[%d]   = \"%s\";\n", i, netFolderRoot[i].Data());
      else
//         buffer.AppendFormatted("   fNetFolderRoot[%d]   = \"histos\";\n",i);
         buffer.AppendFormatted("   fNetFolderRoot[%d]   = \"%s\";\n", i, shortCut.Data());
      buffer.AppendFormatted("\n");
   }

   // Database Folder Fields
   buffer.AppendFormatted("   // Database Folder Fields\n");
   for (i = 0; i < numOfFolder; i++) {
      if (folderDataBase[i] && !folderSupport[i]) {
         for (j = 0; j < numOfValue[i]; j++) {
            if (valueDimension[i][j] > 1)
               continue;
            buffer.AppendFormatted("   f%s_%sDBName = \"\";\n", folderName[i].Data(), valueName[i][j].Data());
            buffer.AppendFormatted("   f%s_%sDBPath = \"\";\n", folderName[i].Data(), valueName[i][j].Data());
            buffer.AppendFormatted("   f%s_%sDBCode = new TArrayI(%d);\n", folderName[i].Data(), valueName[i][j].Data(), maxNumberOfPathObjectInterpreterCodes);
            buffer.AppendFormatted("   for (i=0;i<%d;i++)\n", maxNumberOfPathObjectInterpreterCodes);
            buffer.AppendFormatted("      f%s_%sDBCode->AddAt(-1,i);\n", folderName[i].Data(), valueName[i][j].Data());
         }
      }
   }
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("}\n\n");

   // Tree Initialization
   buffer.AppendFormatted("// Tree initialization\n");
   buffer.AppendFormatted("void %sMonitor::InitTrees()\n{\n", shortCut.Data());
   buffer.AppendFormatted("   TFolder *treeFolder = fMainFolder->AddFolder(\"Trees\",\"Trees of the %s framework\");\n", shortCut.Data());
   buffer.AppendFormatted("   TTree *tree;\n");
   buffer.AppendFormatted("   ROMEString fileName;\n\n");
   for (i = 0; i < numOfTree; i++) {
      buffer.AppendFormatted("   tree = new TTree(\"%s\",\"%s\");\n", treeName[i].Data(), treeTitle[i].Data());
      buffer.AppendFormatted("   tree->Branch(\"Info\",\"ROMETreeInfo\",&fTreeInfo,32000,99);\n");
      for (j = 0; j < numOfBranch[i]; j++) {
         iFold = -1;
         for (k = 0; k < numOfFolder; k++) {
            if (branchFolder[i][j] == folderName[k] && !folderSupport[k])
               iFold = k;
         }
         if (iFold < 0)
            continue;
         if (folderArray[iFold] == "1") {
            buffer.AppendFormatted("   tree->Branch(\"%s\",\"%s%s\",gAnalyzer->Get%sAddress(),%s,%s);\n", branchName[i][j].Data(), shortCut.Data(), folderName[iFold].Data(), branchFolder[i][j].Data(), branchBufferSize[i][j].Data(), branchSplitLevel[i][j].Data());
         }
         else {
            buffer.AppendFormatted("   tree->Branch(\"%s\",\"TClonesArray\",gAnalyzer->Get%sAddress(),%s,%s);\n", branchName[i][j].Data(), branchFolder[i][j].Data(), branchBufferSize[i][j].Data(), branchSplitLevel[i][j].Data());
         }
      }
      buffer.AppendFormatted("   AddTree(tree);\n");
      buffer.AppendFormatted("   treeFolder->Add(tree);\n\n");
   }
   buffer.AppendFormatted("}\n\n");

   Int_t ndb = 0;
   for (i = 0; i < numOfFolder; i++)
      if (folderDataBase[i])
         ndb++;

   // ReadSingleDataBaseFolders
   buffer.AppendFormatted("Bool_t %sMonitor::ReadSingleDataBaseFolders() {\n", shortCut.Data());
   if (ndb > 0) {
      for (i = 0; i < numOfFolder; i++) {
         if (folderDataBase[i] && folderArray[i] == "1" && !folderSupport[i]) {
            buffer.AppendFormatted("   if(!Read%s())\n", folderName[i].Data());
            buffer.AppendFormatted("      return kFALSE;\n");
         }
      }
   }
   buffer.AppendFormatted("   return kTRUE;\n");
   buffer.AppendFormatted("}\n\n");

   // ReadArrayDataBaseFolders
   buffer.AppendFormatted("\nBool_t %sMonitor::ReadArrayDataBaseFolders() {\n", shortCut.Data());
   if (ndb > 0) {
      for (i = 0; i < numOfFolder; i++) {
         if (folderDataBase[i] && folderArray[i] != "1" && !folderSupport[i])
            buffer.AppendFormatted("   if(!Read%s()) return kFALSE;\n", folderName[i].Data());
      }
   }
   buffer.AppendFormatted("   return kTRUE;\n");
   buffer.AppendFormatted("}\n\n");

   // clean up folders
   buffer.AppendFormatted("\n// Delete Unused Folders\n");
   buffer.AppendFormatted("void %sMonitor::CleanUpFolders() {\n", shortCut.Data());
   for (i = 0; i < numOfFolder; i++) {
      if (numOfValue[i] > 0 && !folderDataBase[i] && folderArray[i] == "variable") {
         buffer.AppendFormatted("   Int_t i;\n");
         break;
      }
   }
   for (i = 0; i < numOfFolder; i++) {
      if (numOfValue[i] > 0 && !folderDataBase[i] && !folderSupport[i]) {
         if (folderArray[i] == "variable") {
            buffer.AppendFormatted("   for (i=gMonitor->Get%ss()->GetEntriesFast()-1;i>=0;i--) {\n", folderName[i].Data());
            buffer.AppendFormatted("      if (dynamic_cast<%s%s*>(gMonitor->Get%sAt(i))->isModified())\n", shortCut.Data(), folderName[i].Data(), folderName[i].Data());
            buffer.AppendFormatted("         break;\n");
            buffer.AppendFormatted("      gMonitor->Get%ss()->RemoveAt(i);\n", folderName[i].Data());
            buffer.AppendFormatted("   }\n");
         }
      }
   }
   buffer.AppendFormatted("}\n\n");

   // reset folders
   buffer.AppendFormatted("// Reset Folders\n");
   buffer.AppendFormatted("\nvoid %sMonitor::ResetFolders() {\n", shortCut.Data());
   for (i = 0; i < numOfFolder; i++) {
      if (numOfValue[i] > 0 && !folderDataBase[i] && folderArray[i] != "1" && !folderSupport[i]) {
         buffer.AppendFormatted("   Int_t i;\n");
         break;
      }
   }
   for (i = 0; i < numOfFolder; i++) {
      if (numOfValue[i] > 0 && !folderDataBase[i]) {
         if (folderArray[i] == "1") {
            buffer.AppendFormatted("   gMonitor->Get%s()->Reset();\n", folderName[i].Data());
         }
         else if (folderArray[i] == "variable") {
            buffer.AppendFormatted("   for (i=0;i<gMonitor->Get%ss()->GetEntriesFast();i++) {\n", folderName[i].Data());
            buffer.AppendFormatted("      dynamic_cast<%s%s*>(gMonitor->Get%sAt(i))->Reset();\n", shortCut.Data(), folderName[i].Data(), folderName[i].Data());
            buffer.AppendFormatted("   }\n");
         }
         else {
            buffer.AppendFormatted("   for (i=0;i<gMonitor->Get%ss()->GetEntriesFast();i++) {\n", folderName[i].Data());
            buffer.AppendFormatted("      ((%s%s*)gMonitor->Get%sAt(i))->SetModified(kFALSE);\n", shortCut.Data(), folderName[i].Data(), folderName[i].Data());
            buffer.AppendFormatted("   }\n");
         }
      }
   }
   buffer.AppendFormatted("}\n\n");

   // Read each folders
   for (i = 0; i < numOfFolder; i++) {
      if (folderDataBase[i] && !folderSupport[i]) {
         buffer.AppendFormatted("Bool_t %sMonitor::Read%s() {\n", shortCut.Data(), folderName[i].Data());
         WriteReadDataBaseFolder(buffer, i, folderArray[i] == "1" ? 1 : 2);
         buffer.AppendFormatted("   return kTRUE;\n");
         buffer.AppendFormatted("}\n\n");
      }
   }

/*
      if (!folderDataBase[i] || numOfValue[i]==0 )
         continue;
      buffer.AppendFormatted("\nBool_t %sMonitor::Read%s() {\n",shortCut.Data(),folderName[i].Data());
      // ROMEFolder
      if(folderDefinedInROME[i]){
	 buffer.AppendFormatted("   if(!fNetFolder){\n");
	 buffer.AppendFormatted("      cout<<\"Warning: \"<<gMonitor->GetProgramName()<<\" is not connected to ROOT server.\"<<endl;\n");
	 buffer.AppendFormatted("      cout<<\"%s is not updated.\"<<endl;\n",folderName[i].Data());
	 buffer.AppendFormatted("      return kTRUE;\n");
	 buffer.AppendFormatted("   }\n");
         if (folderArray[i]=="1") {
            buffer.AppendFormatted("   if(f%sFolder)\n",folderName[i].Data());
            buffer.AppendFormatted("      delete f%sFolder;\n",folderName[i].Data());
            buffer.AppendFormatted("      f%sFolder = (%s%s*)((TFolder*) fNetFolder->FindObjectAny(\"%s\"))->FindObject(\"%s%s\");\n",folderName[i].Data(),shortCut.Data(),folderName[i].Data(),folderName[i].Data(),shortCut.Data(),folderName[i].Data());
            buffer.AppendFormatted("   if (!f%sFolder){\n",folderName[i].Data());
            buffer.AppendFormatted("      cout<<\"%s not available\"<<endl;\n",folderName[i].Data());
            buffer.AppendFormatted("      return kFALSE;\n");
            buffer.AppendFormatted("   }\n");
         }
         else {
            buffer.AppendFormatted("   if(f%sFolders)\n",folderName[i].Data());
            buffer.AppendFormatted("      delete f%sFolders;\n",folderName[i].Data());
            buffer.AppendFormatted("      f%sFolders = (TClonesArray*)((TFolder*) fNetFolder->FindObjectAny(\"%s\"))->FindObject(\"%s%ss\");\n",folderName[i].Data(),folderName[i].Data(),shortCut.Data(),folderName[i].Data());
            buffer.AppendFormatted("   if (!f%sFolders){\n",folderName[i].Data());
            buffer.AppendFormatted("      cout<<\"%s not available\"<<endl;\n",folderName[i].Data());
            buffer.AppendFormatted("      return kTRUE;\n");
            buffer.AppendFormatted("   }\n");
         }
      }
      // ODB folder
      else if(folderConnectionType[i] == "ODB"){
         buffer.AppendFormatted("   INT   size;\n");
         ROMEString tid;
         for (j=0;j<numOfValue[i];j++) {
            if (valueArray[i][j]!="1") {
               buffer.AppendFormatted("   HNDLE hkey;\n");
               buffer.AppendFormatted("   Int_t i;\n");
               break;
            }
         }
         for (j=0;j<numOfValue[i];j++) {
            GetMidasTID(&tid, (Char_t*)valueType[i][j].Data());
            if (valueArray[i][j]=="1") {
               buffer.AppendFormatted("   %s %s_%s;\n",valueType[i][j].Data(),folderName[i].Data(),valueName[i][j].Data());
               buffer.AppendFormatted("   size = sizeof(%s_%s);\n",folderName[i].Data(),valueName[i][j].Data());
               buffer.AppendFormatted("   db_get_value(fMidasOnlineDataBase, 0, \"%s\", &%s_%s, &size, %s, FALSE);\n",valueDataBasePath[i][j].Data(),folderName[i].Data(),valueName[i][j].Data(),tid.Data());
               buffer.AppendFormatted("   f%sFolder->Set%s(%s_%s);\n",folderName[i].Data(),valueName[i][j].Data(),folderName[i].Data(),valueName[i][j].Data());
            }
            else {
               buffer.AppendFormatted("   %s %s_%s[%s];\n",valueType[i][j].Data(),folderName[i].Data(),valueName[i][j].Data(),valueArray[i][j].Data());
               buffer.AppendFormatted("   size = sizeof(%s_%s);\n",folderName[i].Data(),valueName[i][j].Data());
               buffer.AppendFormatted("   db_find_key(fMidasOnlineDataBase, 0, %s, &hkey);\n",valueDataBasePath[i][j].Data());
               buffer.AppendFormatted("   db_get_data(fMidasOnlineDataBase, hkey, %s_%s, &size, %s);\n",folderName[i].Data(),valueName[i][j].Data(),tid.Data());
               buffer.AppendFormatted("   for (i=0;i<%s;i++) {\n",valueArray[i][j].Data());
               buffer.AppendFormatted("      f%sFolder->Set%sAt(i,(%s)%s_%s[i]);\n",folderName[i].Data(),valueName[i][j].Data(),valueType[i][j].Data(),folderName[i].Data(),valueName[i][j].Data());
               buffer.AppendFormatted("   }\n");
            }
         }
      }
      else if(folderConnectionType[i] == "ROMEDataBase"){
         // ROMEDataBase Folder
         buffer.AppendFormatted("   ROMEString path;\n");
         buffer.AppendFormatted("   ROMEStr2DArray *values = new ROMEStr2DArray(1,1);\n");
         if(folderArray[i]!="1")
         buffer.AppendFormatted("   Int_t i;\n");
         for (j=0;j<numOfValue[i];j++) {
         if (valueArray[i][j]!="1") {
               buffer.AppendFormatted("   Int_t j;\n");
               break;
            }
         }
         for (j=0;j<numOfValue[i];j++) {
            if (isNumber(valueType[i][j].Data())){
               buffer.AppendFormatted("   Char_t *cstop;\n");
               break;
            }
         }
         if (folderArray[i] == "1") {
            for (j=0;j<numOfValue[i];j++) {
               if (folderArray[i]=="1") {
                  buffer.AppendFormatted("   values->RemoveAll();\n");
                  buffer.AppendFormatted("   path.SetFormatted(%s);\n",valueDataBasePath[i][j].Data());
                  buffer.AppendFormatted("   if (!this->GetDataBase()->Read(values,path,fRunNumber))\n");
                  buffer.AppendFormatted("      return kFALSE;\n");
                  if (valueArray[i][j]=="1") {
                     buffer.AppendFormatted("   if (values->At(0,0).Length()!=0)\n");
                     setValue(&buf,(Char_t*)valueName[i][j].Data(),"values->At(0,0).Data()",(Char_t*)valueType[i][j].Data(),1);
                     buffer.AppendFormatted("      f%sFolder->Set%s((%s)%s);\n",folderName[i].Data(),valueName[i][j].Data(),valueType[i][j].Data(),buf.Data());
                     buffer.AppendFormatted("   else\n");
                     buffer.AppendFormatted("      f%sFolder->Set%s(%s);\n",folderName[i].Data(),valueName[i][j].Data(),valueInit[i][j].Data());
                  }
                  else {
                     buffer.AppendFormatted("   for (j=0;j<%s;j++) {\n",valueArray[i][j].Data());
                     buffer.AppendFormatted("      if (values->At(0,j).Length()!=0)\n");
                     setValue(&buf,(Char_t*)valueName[i][j].Data(),"values->At(0,j).Data()",(Char_t*)valueType[i][j].Data(),1);
                     buffer.AppendFormatted("         f%sFolder->Set%sAt(j,(%s)%s);\n",folderName[i].Data(),valueName[i][j].Data(),valueType[i][j].Data(),buf.Data());
                     buffer.AppendFormatted("      else\n");
                     buffer.AppendFormatted("         f%sFolder->Set%sAt(j,%s);\n",folderName[i].Data(),valueName[i][j].Data(),valueInit[i][j].Data());
                     buffer.AppendFormatted("   }\n");
                  }
               }
            }
         }
         else{
            for (j=0;j<numOfValue[i];j++) {
               buffer.AppendFormatted("   values->RemoveAll();\n");
               buffer.AppendFormatted("   path.SetFormatted(%s);\n",valueDataBasePath[i][j].Data());
               buffer.AppendFormatted("   if (!this->GetDataBase()->Read(values,path,fRunNumber))\n");
               buffer.AppendFormatted("      return kFALSE;\n");
               buffer.AppendFormatted("   for (i=0;i<f%sFolders->GetEntries();i++) {\n",folderName[i].Data());
               if (valueArray[i][j]=="1") {
                  buffer.AppendFormatted("      if (values->At(i,0).Length()!=0)\n");
                  setValue(&buf,(Char_t*)valueName[i][j].Data(),"values->At(i,0).Data()",(Char_t*)valueType[i][j].Data(),1);
                  buffer.AppendFormatted("         ((%s%s*)f%sFolders->At(i))->Set%s((%s)%s);\n",shortCut.Data(),folderName[i].Data(),folderName[i].Data(),valueName[i][j].Data(),valueType[i][j].Data(),buf.Data());
                  buffer.AppendFormatted("      else\n");
                  buffer.AppendFormatted("         ((%s%s*)f%sFolders->At(i))->Set%s(%s);\n",shortCut.Data(),folderName[i].Data(),folderName[i].Data(),valueName[i][j].Data(),valueInit[i][j].Data());
               }
               else {
                  buffer.AppendFormatted("      for (j=0;j<%s;j++) {\n",valueArray[i][j].Data());
                  buffer.AppendFormatted("         if (values->At(i,j).Length()!=0)\n");
                  setValue(&buf,(Char_t*)valueName[i][j].Data(),"values->At(i,j).Data()",(Char_t*)valueType[i][j].Data(),1);
                  buffer.AppendFormatted("            ((%s%s*)f%sFolders->At(i))->Set%sAt(j,(%s)%s);\n",shortCut.Data(),folderName[i].Data(),folderName[i].Data(),valueName[i][j].Data(),valueType[i][j].Data(),buf.Data());
                  buffer.AppendFormatted("         else\n");
                  buffer.AppendFormatted("            ((%s%s*)f%sFolders->At(i))->Set%sAt(j,%s);\n",shortCut.Data(),folderName[i].Data(),folderName[i].Data(),valueName[i][j].Data(),valueInit[i][j].Data());
                  buffer.AppendFormatted("      }\n");
               }
	       buffer.AppendFormatted("   }\n");
            }
         }
         buffer.AppendFormatted("   values->RemoveAll();\n");
         buffer.AppendFormatted("   delete values;\n");
      }
      buffer.AppendFormatted("   return kTRUE;\n");
      buffer.AppendFormatted("};\n");
   }
*/

   // Get Object Interpreter Code
   Int_t codeNumber = 0;
   buffer.AppendFormatted("Int_t %sMonitor::GetObjectInterpreterCode(const Char_t* objectPath) {\n", shortCut.Data());
   buffer.AppendFormatted("   ROMEString path = objectPath;\n");
   buffer.AppendFormatted("   if (path.Index(\"/\")!=0)\n");
   buffer.AppendFormatted("      return -1;\n");
   buffer.AppendFormatted("   if (path.Index(\"/GSP\")==0) {\n");
   ROMEString path = "/GSP";
   codeNumber = WriteSteeringInterpreterCode(buffer, codeNumber, 0, numOfTaskHierarchy, path, 1);
   buffer.AppendFormatted("      gMonitor->Println(\"\\nWrong path to a steering parameter in configuration file.\\n\");\n");
   buffer.AppendFormatted("      gMonitor->Println(\"   \"+path+\"\\n\");\n");
   buffer.AppendFormatted("      return -1;\n");
   buffer.AppendFormatted("   }\n");
   for (i = 0; i < numOfFolder; i++) {
      if (folderArray[i] == "1" && !folderSupport[i]) {
         for (j = 0; j < numOfValue[i]; j++) {
            if (valueDimension[i][j] == 0) {
               buffer.AppendFormatted("   if (path==\"/%s/%s\")\n", folderName[i].Data(), valueName[i][j].Data());
               buffer.AppendFormatted("      return %d;\n", codeNumber);
               codeNumber++;
            }
         }
      }
   }
   buffer.AppendFormatted("   gMonitor->Println(\"\\nWrong path in configuration file.\\n\");\n");
   buffer.AppendFormatted("   gMonitor->Println(\"   \"+path+\"\\n\");\n");
   buffer.AppendFormatted("   return -1;\n");
   buffer.AppendFormatted("}\n");
   buffer.AppendFormatted("\n");
   fNumberOfInterpreterCodes = codeNumber;

   // Get Object Interpreter Values
   WriteObjectInterpreterValue(buffer, "int", "Int");
   WriteObjectInterpreterValue(buffer, "double", "Double");
   WriteObjectInterpreterValue(buffer, "ROMEString&", "Char");

   buffer.AppendFormatted("\nBool_t %sMonitor::StartWindow() {\n", shortCut.Data());
   buffer.AppendFormatted("   return gWindow->Start();\n");
   buffer.AppendFormatted("}\n");

   // Initialize Single Folders
   buffer.AppendFormatted("\nvoid %sMonitor::InitSingleFolders() {\n", shortCut.Data());
   for (i = 0; i < numOfFolder; i++) {
      if (numOfValue[i] > 0 && !folderSupport[i]) {
         if (folderArray[i] == "1") {
            buffer.AppendFormatted("   new(gMonitor->Get%s()) %s%s( ", folderName[i].Data(), shortCut.Data(), folderName[i].Data());
            for (j = 0; j < numOfValue[i]; j++) {
               if (isFolder(valueType[i][j].Data()))
                  continue;
               if (valueDimension[i][j] == 0)
                  buffer.AppendFormatted("%s,", valueInit[i][j].Data());
            }
            buffer.Resize(buffer.Length() - 1);
            buffer.AppendFormatted(" );\n");
         }
      }
   }
   buffer.AppendFormatted("};\n\n");

   // Initialize Array Folders
   buffer.AppendFormatted("\nvoid %sMonitor::InitArrayFolders() {\n", shortCut.Data());
   for (i = 0; i < numOfFolder; i++) {
      if (numOfValue[i] > 0 && !folderSupport[i]) {
         if (folderArray[i] != "1" && folderArray[i] != "variable")
            buffer.AppendFormatted("   gMonitor->Set%sSize(%s);\n", folderName[i].Data(), folderArray[i].Data());
      }
   }
   buffer.AppendFormatted("};\n\n");

   // ReadUserParameter
   buffer.AppendFormatted("Bool_t %sMonitor::ReadUserParameter(const Char_t* opt, const Char_t* value, Int_t& i) {\n", shortCut.Data());

   // Global Steering Parameter
   buffer.AppendFormatted("   ROMEString option = opt;\n");
   buffer.AppendFormatted("   Char_t *cstop;\n");
   buffer.AppendFormatted("   // global steering parameters\n");
   if (numOfSteering[numOfTab] > 0) {
      ROMEString pointerT;
      ROMEString steerPointerT;
      pointerT.SetFormatted("->fGlobalSteering");
      steerPointerT.SetFormatted("gMonitor->GetGSP()");
      WriteSteeringReadParameters(buffer, 0, numOfTab, pointerT, steerPointerT);
   }
   // Tab steering parameter
   ROMEString pointer;
   for (i = 0; i < numOfTab; i++) {
      buffer.AppendFormatted("   // %s tab\n", tabName[i].Data());
      Int_t index = i;
      pointer.Resize(0);
      while (index != -1) {
         pointer.InsertFormatted(0, "->f%sTab", tabName[index].Data());
         index = tabParentIndex[index];
      }
      if (numOfSteering[i] > 0) {
         ROMEString pointerT;
         ROMEString steerPointerT;
         pointerT.SetFormatted("%s->fSteering", pointer.Data());
         steerPointerT.SetFormatted("dynamic_cast<%sT%s*>(gWindow->Get%s%03dTab())->GetSP()", shortCut.Data(), tabName[i].Data(), tabName[i].Data(), i);
         WriteSteeringReadParameters(buffer, 0, i, pointerT, steerPointerT);
      }
   }
   buffer.AppendFormatted("   return kFALSE;\n");
   buffer.AppendFormatted("}\n\n");

/*   // WriteDataBaseFolders
   for (i=0;i<numOfFolder;i++) {
      if (folderDataBase[i] && !folderSupport[i]) {
         buffer.AppendFormatted("void %sMonitor::Write%sDataBase() {\n",shortCut.Data(),folderName[i].Data());
         buffer.AppendFormatted("   Int_t i,j;\n");
         buffer.AppendFormatted("   ROMEString path;\n");
         buffer.AppendFormatted("   ROMEString buffer[%d];\n",maxNumberOfPathObjectInterpreterCodes);
         buffer.AppendFormatted("   ROMEStr2DArray *values = new ROMEStr2DArray(1,1);\n");
         for (j=0;j<numOfValue[i];j++) {
            buffer.AppendFormatted("   values->RemoveAll();\n");
            if (folderArray[i]=="1") {
               if (valueArray[i][j]=="1") {
                  buf = "buffer[0]";
                  str.SetFormatted("f%sFolder->Get%s()",folderName[i].Data(),valueName[i][j].Data());
                  buffer.AppendFormatted("   values->SetAt(%s,0,0);\n",convertType(str.Data(),valueType[i][j].Data(),"ROMEString&",buf).Data());
               }
               else {
                  buf = "buffer[0]";
                  str.SetFormatted("f%sFolder->Get%sAt(j)",folderName[i].Data(),valueName[i][j].Data());
                  buffer.AppendFormatted("   for (j=0;j<%s;j++)\n",valueArray[i][j].Data());
                  buffer.AppendFormatted("      values->SetAt(%s,0,j);\n",convertType(str.Data(),valueType[i][j].Data(),"ROMEString&",buf).Data());
               }
            }
            else {
               buffer.AppendFormatted("   for (i=0;i<f%sFolders->GetEntries();i++)\n",folderName[i].Data());
               if (valueArray[i][j]=="1") {
                  buf = "buffer[0]";
                  str.SetFormatted("((%s%s*)f%sFolders->At(i))->Get%s()",shortCut.Data(),folderName[i].Data(),folderName[i].Data(),valueName[i][j].Data());
                  buffer.AppendFormatted("      values->SetAt(%s,i,0);\n",convertType(str.Data(),valueType[i][j].Data(),"ROMEString&",buf).Data());
               }
               else {
                  buf = "buffer[0]";
                  str.SetFormatted("((%s%s*)f%sFolders->At(i))->Get%sAt(j)",shortCut.Data(),folderName[i].Data(),folderName[i].Data(),valueName[i][j].Data());
                  buffer.AppendFormatted("      for (j=0;j<%s;j++)\n",valueArray[i][j].Data());
                  buffer.AppendFormatted("         values->SetAt(%s,i,j);\n",convertType(str.Data(),valueType[i][j].Data(),"ROMEString&",buf).Data());
               }
            }
            buffer.AppendFormatted("   path.SetFormatted(gMonitor->Get%s_%sDBPath()",folderName[i].Data(),valueName[i][j].Data());
            for (k=0;k<maxNumberOfPathObjectInterpreterCodes;k++)
               buffer.AppendFormatted(",gMonitor->GetObjectInterpreterCharValue(gMonitor->Get%s_%sDBCodeAt(%d),buffer[%d],buffer[%d]).Data()",folderName[i].Data(),valueName[i][j].Data(),k,k,k);
            buffer.AppendFormatted(");\n");
            buffer.AppendFormatted("   if (!this->GetDataBase(gMonitor->Get%s_%sDBIndex())->Write(values,path,gMonitor->GetCurrentRunNumber())) {\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("      gMonitor->Println\"   in Folder '%s' Value '%s'.\");\n",folderName[i].Data(),valueName[i][j].Data());
            buffer.AppendFormatted("      delete values;\n");
            buffer.AppendFormatted("      return;\n");
            buffer.AppendFormatted("   }\n");
         }
         buffer.AppendFormatted("   values->RemoveAll();\n");
         buffer.AppendFormatted("   delete values;\n");
         buffer.AppendFormatted("}\n");
      }
   }
*/

   // UserParameterUsage
   buffer.AppendFormatted("void %sMonitor::UserParameterUsage() {\n", shortCut.Data());
   // Global Steering Parameter
   buffer.AppendFormatted("   // global steering parameters\n");
   if (numOfSteering[numOfTab] > 0) {
      ROMEString pointerT;
      ROMEString steerPointerT;
      pointerT.SetFormatted("->fGlobalSteering");
      steerPointerT.SetFormatted("gMonitor->GetGSP()");
      WriteSteeringParameterUsage(buffer, 0, numOfTab, pointerT, steerPointerT);
   }
   // Tab steering parameter
   for (i = 0; i < numOfTab; i++) {
      buffer.AppendFormatted("   // %s tab\n", tabName[i].Data());
      Int_t index = i;
      pointer.Resize(0);
      while (index != -1) {
         pointer.InsertFormatted(0, "->f%sTab", tabName[index].Data());
         index = tabParentIndex[index];
      }
      if (numOfSteering[i] > 0) {
         ROMEString pointerT;
         ROMEString steerPointerT;
         pointerT.SetFormatted("%s->fSteering", pointer.Data());
         steerPointerT.SetFormatted("((%sT%s*)gMonitor->Get%s%03dTab())->GetSP()", shortCut.Data(), tabName[i].Data(), tabName[i].Data(), i);
         WriteSteeringParameterUsage(buffer, 0, i, pointerT, steerPointerT);
      }
   }
   buffer.AppendFormatted("}\n\n");

   // Close cpp-File
   WriteFile(cppFile.Data(), buffer.Data(), 6);
   return kTRUE;
}

Bool_t ArgusBuilder::WriteMonitorH()
{
   Int_t i, j;
   ROMEString hFile;
   ROMEString buffer;
   ROMEString bankname;
   ROMEString format;

   // max folder name length
   Int_t nameLen = -1;
   Int_t fieldLen = -1;
   Int_t typeLen = -1;
   Int_t scl = shortCut.Length();
   for (i = 0; i < numOfFolder; i++) {
      if (!folderSupport[i]) {
         typeLen = TMath::Max(typeLen, static_cast<Int_t>(folderName[i].Length() + scl + strlen("*")));
         typeLen = TMath::Max(typeLen, static_cast<Int_t>(folderName[i].Length() + scl + strlen("**")));
         nameLen = TMath::Max(nameLen, static_cast<Int_t>(folderName[i].Length()));
         if (folderDataBase[i]) {
            for (j = 0; j < numOfValue[i]; j++)
               fieldLen = TMath::Max(fieldLen, valueName[i][j].Length());
         }
      }
   }
   typeLen = TMath::Max(typeLen, static_cast<Int_t>(strlen("TClonesArray*")));
   typeLen = TMath::Max(typeLen, static_cast<Int_t>(strlen("TClonesArray**")));

   // max tree name length
   Int_t treeLen = 0;
   for (i = 0; i < numOfTree; i++) {
      if (treeLen < static_cast<Int_t>(treeName[i].Length()))
         treeLen = treeName[i].Length();
   }

   // File name
   hFile.SetFormatted("%s/include/framework/%sMonitor.h", outDir.Data(), shortCut.Data());
   // Description
   buffer.Resize(0);
   buffer.AppendFormatted("////////////////////////////////////////////////////////////////////////////////\n");
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("// This file has been generated by the ArgusBuilder.                          //\n");
   buffer.AppendFormatted("// Manual changes to this file will always be overwritten by the builder.     //\n");
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("////////////////////////////////////////////////////////////////////////////////\n\n");

   // Header
   buffer.AppendFormatted("#ifndef %sMonitor_H\n", shortCut.Data());
   buffer.AppendFormatted("#define %sMonitor_H\n\n", shortCut.Data());
   buffer.AppendFormatted("#include <ROME.h>\n");
   buffer.AppendFormatted("#include <ArgusMonitor.h>\n");
   buffer.AppendFormatted("#include <TClonesArray.h>\n");
   buffer.AppendFormatted("#include <TNetFolder.h>\n");
   buffer.AppendFormatted("#include <TArrayI.h>\n", shortCut.Data());
   // include
   if (numOfSteering[numOfTab] > 0) {
      buffer.AppendFormatted("#include \"include/framework/%sGlobalSteering.h\"\n", shortCut.Data());
   }
   // DAQ includes
   buffer.AppendFormatted("#include <include/framework/%sMidas.h>\n", shortCut.Data());
   buffer.AppendFormatted("#include <include/framework/%sRome.h>\n", shortCut.Data());
   if (this->orca)
      buffer.AppendFormatted("#include <ROMEOrca.h>\n", shortCut.Data());
   for (i = 0; i < numOfDAQ; i++)
      buffer.AppendFormatted("#include <include/framework/%s%s.h>\n", shortCut.Data(), daqName[i].Data());

   // Folder includes
   for (i = 0; i < numOfFolder; i++) {
      if (numOfValue[i] > 0 && !folderSupport[i])
         buffer.AppendFormatted("#include \"include/framework/%s%s.h\"\n", shortCut.Data(), folderName[i].Data());
   }
   buffer.AppendFormatted("\n");

   // Class
   buffer.AppendFormatted("\nclass %sMonitor : public ArgusMonitor\n", shortCut.Data());
   buffer.AppendFormatted("{\n");

   // Fields
   buffer.AppendFormatted("protected:\n");
   buffer.AppendFormatted("\n");

   // Folder Fields
   buffer.AppendFormatted("   // Folder fields\n");
   for (i = 0; i < numOfFolder; i++) {
      if (!folderSupport[i]) {
         if (numOfValue[i] > 0) {
            if (folderArray[i] == "1") {
               format.SetFormatted("   %%s%%s*%%%ds f%%sFolder; %%%ds // Handle to %%s%%s Folder\n", typeLen - folderName[i].Length() - scl - strlen("*"), nameLen - folderName[i].Length());
               buffer.AppendFormatted(const_cast<Char_t*>(format.Data()), shortCut.Data(), folderName[i].Data(), "", folderName[i].Data(), "", shortCut.Data(), folderName[i].Data());
            }
            else {
               format.SetFormatted("   TClonesArray*%%%ds f%%sFolders;%%%ds // Handle to %%s%%s Folders\n", typeLen - strlen("TClonesArray*"), nameLen - folderName[i].Length());
               buffer.AppendFormatted(const_cast<Char_t*>(format.Data()), "", folderName[i].Data(), "", shortCut.Data(), folderName[i].Data());
            }
         }
      }
   }
   buffer.AppendFormatted("\n");

   // Database Folder Fields
   buffer.AppendFormatted("   // Database Folder Fields\n");
   for (i = 0; i < numOfFolder; i++) {
      if (folderDataBase[i] && !folderSupport[i]) {
         for (j = 0; j < numOfValue[i]; j++) {
            if (valueDimension[i][j] > 1)
               continue;
            format.SetFormatted("   ROMEString f%%s_%%sDBName; %%%ds // Name of the database from which to read the field %%s of the folder %%s\n", fieldLen + nameLen - folderName[i].Length() - valueName[i][j].Length());
            buffer.AppendFormatted(format.Data(), folderName[i].Data(), valueName[i][j].Data(), "", valueName[i][j].Data(), folderName[i].Data());
            format.SetFormatted("   ROMEString f%%s_%%sDBPath; %%%ds // Database path to the value of the field %%s of the folder %%s\n", fieldLen + nameLen - folderName[i].Length() - valueName[i][j].Length());
            buffer.AppendFormatted(format.Data(), folderName[i].Data(), valueName[i][j].Data(), "", valueName[i][j].Data(), folderName[i].Data());
            format.SetFormatted("   TArrayI   *f%%s_%%sDBCode; %%%ds // Object Interpreter codes for database path to the value of the field %%s of the folder %%s\n", fieldLen + nameLen - folderName[i].Length() - valueName[i][j].Length());
            buffer.AppendFormatted(format.Data(), folderName[i].Data(), valueName[i][j].Data(), "", valueName[i][j].Data(), folderName[i].Data());
         }
      }
   }
   buffer.AppendFormatted("\n");

   // Steering Fields
   if (numOfSteering[numOfTab] > 0) {
      buffer.AppendFormatted("   // Steering Parameter Fields\n");
      buffer.AppendFormatted("\n   %sGlobalSteering* fGlobalSteeringParameters; // Handle to the GlobalSteering Class\n", shortCut.Data());
   }
   // DAQ Handle
   buffer.AppendFormatted("   // DAQ Handle\n");
   buffer.AppendFormatted("   %sMidas* fMidas; // Handle to the Midas DAQ Class\n", shortCut.Data());
   buffer.AppendFormatted("   %sRome*  fRome; // Handle to the Rome DAQ Class\n", shortCut.Data());
   if (this->orca)
      buffer.AppendFormatted("   ROMEOrca* fOrca; // Handle to the Orca DAQ Class\n", shortCut.Data());
   for (i = 0; i < numOfDAQ; i++)
      buffer.AppendFormatted("   %s%s*  f%s; // Handle to the %s DAQ Class\n", shortCut.Data(), daqName[i].Data(), daqName[i].Data(), daqName[i].Data());
   buffer.AppendFormatted("\n");

   // Methods
   buffer.AppendFormatted("public:\n");

   // Constructor
   buffer.AppendFormatted("   %sMonitor(TApplication *app);\n", shortCut.Data());

   // Folder Getters
   buffer.AppendFormatted("   // Folders\n");
   for (i = 0; i < numOfFolder; i++)
      WriteFolderGetter(buffer, i, scl, nameLen, typeLen);
   buffer.AppendFormatted("\n");

   // Set size
   for (i = 0; i < numOfFolder; i++) {
      if (!folderSupport[i] && numOfValue[i] > 0 && folderArray[i] != "1") {
         if (folderArray[i] != "variable")
            buffer.AppendFormatted("private:\n");
         buffer.AppendFormatted("   void Set%sSize(Int_t number) {\n", folderName[i].Data());
         buffer.AppendFormatted("      Int_t i;\n");
         buffer.AppendFormatted("      if(f%sFolders) f%sFolders->Delete();\n", folderName[i].Data(), folderName[i].Data());
         buffer.AppendFormatted("      for (i=0;i<number;i++) {\n");
         buffer.AppendFormatted("         new((*f%sFolders)[i]) %s%s( ", folderName[i].Data(), shortCut.Data(), folderName[i].Data());
         for (j = 0; j < numOfValue[i]; j++) {
            if (isFolder(valueType[i][j].Data()))
               continue;
            if (valueDimension[i][j] == 0)
               buffer.AppendFormatted("%s,", valueInit[i][j].Data());
         }
         buffer.Resize(buffer.Length() - 1);
         buffer.AppendFormatted(" );\n");
         buffer.AppendFormatted("      }\n");
         buffer.AppendFormatted("   }\n");
         if (folderArray[i] != "variable")
            buffer.AppendFormatted("public:\n");
         buffer.AppendFormatted("   Int_t Get%sSize() { return f%sFolders->GetEntries(); }\n", folderName[i].Data(), folderName[i].Data());
      }
   }
   buffer.AppendFormatted("\n");

   // Tree Getters
   buffer.AppendFormatted("   // Trees\n");
   for (i = 0; i < numOfTree; i++) {
      format.SetFormatted("   TTree* Get%%sTree()%%%ds { return ((ROMETree*)fTreeObjects->At(%%d))->GetTree(); };\n", treeLen - treeName[i].Length());
      buffer.AppendFormatted(format.Data(), treeName[i].Data(), "", i);
   }
   buffer.AppendFormatted("\n");

   // Database Getters
   buffer.AppendFormatted("   // Database\n");
   buffer.AppendFormatted("   ROMEDataBase* GetXMLDataBase() { return GetDataBase(\"XML\"); };\n");
   buffer.AppendFormatted("   ROMEDataBase* GetTextDataBase() { return GetDataBase(\"TEXT\"); };\n");
   buffer.AppendFormatted("   ROMEDataBase* GetODBDataBase() { return GetDataBase(\"ODB\"); };\n");
   buffer.AppendFormatted("#if defined( HAVE_SQL )\n");
   buffer.AppendFormatted("   ROMEDataBase* GetSQLDataBase() { return GetDataBase(\"SQL\"); };\n");
   buffer.AppendFormatted("#endif\n");
   for (i = 0; i < numOfDB; i++) {
      buffer.AppendFormatted("   ROMEDataBase* Get%sDataBase() { return GetDataBase(\"%s\"); };\n", dbName[i].Data(), dbName[i].Data());
   }
   buffer.AppendFormatted("\n");

   // Database Folder Field Getters
   buffer.AppendFormatted("   // Database Folder Field Getters\n");
   for (i = 0; i < numOfFolder; i++) {
      if (folderDataBase[i] && !folderSupport[i]) {
         for (j = 0; j < numOfValue[i]; j++) {
            if (valueDimension[i][j] > 1)
               continue;
            format.SetFormatted("   const Char_t* Get%%s_%%sDBName()%%%ds          { return f%%s_%%sDBName; };\n", fieldLen + nameLen - folderName[i].Length() - valueName[i][j].Length());
            buffer.AppendFormatted(format.Data(), folderName[i].Data(), valueName[i][j].Data(), "", folderName[i].Data(), valueName[i][j].Data());
            format.SetFormatted("   const Char_t* Get%%s_%%sDBPath()%%%ds          { return f%%s_%%sDBPath; };\n", fieldLen + nameLen - folderName[i].Length() - valueName[i][j].Length());
            buffer.AppendFormatted(format.Data(), folderName[i].Data(), valueName[i][j].Data(), "", folderName[i].Data(), valueName[i][j].Data());
            format.SetFormatted("   Int_t         Get%%s_%%sDBNumberOfCode()%%%ds  { return f%%s_%%sDBCode->GetSize(); };\n", fieldLen + nameLen - folderName[i].Length() - valueName[i][j].Length());
            buffer.AppendFormatted(format.Data(), folderName[i].Data(), valueName[i][j].Data(), "", folderName[i].Data(), valueName[i][j].Data());
            format.SetFormatted("   Int_t         Get%%s_%%sDBCodeAt(Int_t i)%%%ds   { return f%%s_%%sDBCode->At(i); };\n", fieldLen + nameLen - folderName[i].Length() - valueName[i][j].Length());
            buffer.AppendFormatted(format.Data(), folderName[i].Data(), valueName[i][j].Data(), "", folderName[i].Data(), valueName[i][j].Data());
         }
      }
   }
   buffer.AppendFormatted("\n");

   // Database Folder Field Setters
   buffer.AppendFormatted("   // Database Folder Field Setters\n");
   for (i = 0; i < numOfFolder; i++) {
      if (folderDataBase[i] && !folderSupport[i]) {
         for (j = 0; j < numOfValue[i]; j++) {
            if (valueDimension[i][j] > 1)
               continue;
            format.SetFormatted("   void Set%%s_%%sDBName(const Char_t* name)%%%ds  { f%%s_%%sDBName = name; };\n", fieldLen + nameLen - folderName[i].Length() - valueName[i][j].Length());
            buffer.AppendFormatted(format.Data(), folderName[i].Data(), valueName[i][j].Data(), "", folderName[i].Data(), valueName[i][j].Data());
            format.SetFormatted("   void Set%%s_%%sDBPath(const Char_t* path)%%%ds  { f%%s_%%sDBPath = path; };\n", fieldLen + nameLen - folderName[i].Length() - valueName[i][j].Length());
            buffer.AppendFormatted(format.Data(), folderName[i].Data(), valueName[i][j].Data(), "", folderName[i].Data(), valueName[i][j].Data());
            format.SetFormatted("   void Set%%s_%%sDBNumberOfCode(Int_t num)%%%ds   { f%%s_%%sDBCode->Set(num); };\n", fieldLen + nameLen - folderName[i].Length() - valueName[i][j].Length());
            buffer.AppendFormatted(format.Data(), folderName[i].Data(), valueName[i][j].Data(), "", folderName[i].Data(), valueName[i][j].Data());
            format.SetFormatted("   void Set%%s_%%sDBCodeAt(Int_t i,Int_t code)%%%ds  { f%%s_%%sDBCode->AddAt(code,i); };\n", fieldLen + nameLen - folderName[i].Length() - valueName[i][j].Length());
            buffer.AppendFormatted(format.Data(), folderName[i].Data(), valueName[i][j].Data(), "", folderName[i].Data(), valueName[i][j].Data());
         }
      }
   }
   buffer.AppendFormatted("\n");

   // Data Base
   buffer.AppendFormatted("   // DataBase Methodes\n");
   // Read each folders
   for (i = 0; i < numOfFolder; i++) {
      if (folderDataBase[i] && !folderSupport[i])
         buffer.AppendFormatted("   Bool_t Read%s();\n", folderName[i].Data());
   }
   buffer.AppendFormatted("   Bool_t ReadSingleDataBaseFolders();\n");
   buffer.AppendFormatted("   Bool_t ReadArrayDataBaseFolders();\n");
   buffer.AppendFormatted("\n");

   // Object Interpreter
   buffer.AppendFormatted("   // Object Interpreter\n");
   buffer.AppendFormatted("   Int_t         GetObjectInterpreterCode(const Char_t* objectPath);\n");
   buffer.AppendFormatted("   Int_t         GetObjectInterpreterIntValue(Int_t code,Int_t defaultValue);\n");
   buffer.AppendFormatted("   double      GetObjectInterpreterDoubleValue(Int_t code,double defaultValue);\n");
   buffer.AppendFormatted("   ROMEString& GetObjectInterpreterCharValue(Int_t code,ROMEString& defaultValue,ROMEString& buffer);\n");
   buffer.AppendFormatted("\n");

   // Steering
   if (numOfSteering[numOfTab] > 0) {
      buffer.AppendFormatted("   // Steering Parameter Methodes\n");
      buffer.AppendFormatted("   %sGlobalSteering* GetGSP() { return fGlobalSteeringParameters; };\n", shortCut.Data());
      buffer.AppendFormatted("\n");
   }
   // DAQ Access Methods
   buffer.AppendFormatted("   // DAQ Access Methods\n");
   buffer.AppendFormatted("   %sMidas* GetMidas() {\n", shortCut.Data());
   buffer.AppendFormatted("      if (fMidas==NULL) {\n");
   buffer.AppendFormatted("         this->Println(\"\\nYou have tried to access the midas DAQ system over a gMonitor->GetMidas()\\nhandle but the current DAQ system is not 'Midas'.\\n\\nShutting down the program.\\n\");\n");
   buffer.AppendFormatted("         fApplication->Terminate(1);\n");
   buffer.AppendFormatted("         return NULL;\n");
   buffer.AppendFormatted("      }\n");
   buffer.AppendFormatted("      return fMidas;\n");
   buffer.AppendFormatted("   };\n");
   buffer.AppendFormatted("   void     SetMidas(%sMidas* handle) { fMidas = handle; };\n", shortCut.Data());
   buffer.AppendFormatted("   %sRome*  GetRome() {\n", shortCut.Data());
   buffer.AppendFormatted("      if (fRome==NULL) {\n");
   buffer.AppendFormatted("         this->Println(\"\\nYou have tried to access the root DAQ system over a gMonitor->GetRome()\\nhandle but the current DAQ system is not 'Rome'.\\n\\nShutting down the program.\\n\");\n");
   buffer.AppendFormatted("         fApplication->Terminate(1);\n");
   buffer.AppendFormatted("         return NULL;\n");
   buffer.AppendFormatted("      }\n");
   buffer.AppendFormatted("      return fRome;\n");
   buffer.AppendFormatted("   };\n");
   buffer.AppendFormatted("   void     SetRome (%sRome*  handle) { fRome  = handle; };\n", shortCut.Data());
   if (this->orca) {
      buffer.AppendFormatted("   ROMEOrca*  GetOrca() {\n");
      buffer.AppendFormatted("      if (fOrca==NULL) {\n");
      buffer.AppendFormatted("         this->Println(\"\\nYou have tried to access the orca DAQ system over a gMonitor->GetOrca()\\nhandle but the current DAQ system is not 'Orca'.\\n\\nShutting down the program.\\n\");\n");
      buffer.AppendFormatted("         fApplication->Terminate(1);\n");
      buffer.AppendFormatted("         return NULL;\n");
      buffer.AppendFormatted("      }\n");
      buffer.AppendFormatted("      return fOrca;\n");
      buffer.AppendFormatted("   };\n");
      buffer.AppendFormatted("   void     SetOrca (ROMEOrca*  handle) { fOrca  = handle; };\n");
   }
   for (i = 0; i < numOfDAQ; i++) {
      buffer.AppendFormatted("   %s%s*  Get%s()                 { return f%s;    };\n", shortCut.Data(), daqName[i].Data(), daqName[i].Data(), daqName[i].Data());
      buffer.AppendFormatted("   void     Set%s (%s%s*  handle) { f%s  = handle; };\n", daqName[i].Data(), shortCut.Data(), daqName[i].Data(), daqName[i].Data());
   }
   buffer.AppendFormatted("\n");

   // Private
   buffer.AppendFormatted("private:\n");
   buffer.AppendFormatted("   Bool_t         StartWindow();\n");
   buffer.AppendFormatted("   void           InitSingleFolders();\n");
   buffer.AppendFormatted("   void           InitArrayFolders();\n");
   buffer.AppendFormatted("   void           ResetFolders();\n");
   buffer.AppendFormatted("   void           CleanUpFolders();\n");
   buffer.AppendFormatted("   Bool_t         ReadUserParameter(const Char_t* opt, const Char_t* value, Int_t& i);\n");
   buffer.AppendFormatted("   void           UserParameterUsage();\n");
   buffer.AppendFormatted("   void           InitTrees();\n", shortCut.Data());

   // Set size
   for (i = 0; i < numOfFolder; i++) {
      if (!folderSupport[i] && numOfValue[i] > 0 && folderArray[i] != "1" && folderArray[i] != "variable") {
         buffer.AppendFormatted("   void SetSize%s(Int_t number) {\n", folderName[i].Data());
         buffer.AppendFormatted("      Int_t i;\n");
         buffer.AppendFormatted("      if(f%sFolders) f%sFolders->Delete();\n", folderName[i].Data(), folderName[i].Data());
         buffer.AppendFormatted("      for (i=0;i<number;i++) {\n");
         buffer.AppendFormatted("         new((*f%sFolders)[i]) %s%s( ", folderName[i].Data(), shortCut.Data(), folderName[i].Data());
         for (j = 0; j < numOfValue[i]; j++) {
            if (isFolder(valueType[i][j].Data()))
               continue;
            if (valueDimension[i][j] == 0)
               buffer.AppendFormatted("%s,", valueInit[i][j].Data());
         }
         buffer.Resize(buffer.Length() - 1);
         buffer.AppendFormatted(" );\n");
         buffer.AppendFormatted("      }\n");
         buffer.AppendFormatted("   }\n");
      }
   }
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("   ClassDef(%sMonitor,0);\n", shortCut.Data());

   // Footer
   buffer.AppendFormatted("};\n\n");
   buffer.AppendFormatted("extern %sMonitor *gMonitor;  // global Monitor Handle\n", shortCut.Data());
   buffer.AppendFormatted("#endif   // %sMonitor_H\n", shortCut.Data());

   // Write File
   WriteFile(hFile.Data(), buffer.Data(), 6);
   return kTRUE;
}
