//// Author: 
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// MEGTTDCAverage                                                             //
//                                                                            //
// Calculates the TDC Average.                                                  
// 
// 
// This header has been generated by the ROMEBuilder.
// The event methods have been written by .
// 
// Please note: The following information is only correct after executing the
//              ROMEBuilder.
// 
// This task accesses the following folders :
//    CMPMTData
//    CMPMTInfo
// 
// This task contains the following histgrams :
//    TDCAverageHisto
//
// The histograms are created and saved automaticaly by the task.
//
// The following method can be used to fill a histogram :
//
// Fill<Histogram Name>(double value,double weight)
//
// For histogram arrays use :
//
// Fill<Histogram Name>At(int index,double value,double weight)
//
// If more histogram functions are needed use the following function the get
// a handle to the histogram and use the root functions.
//
// Get<Histogram Name>()
//
// For histogram arrays use :
//
// Get<Histogram Name>At(int index)
//                                                                            //
/////////////////////////////////////----///////////////////////////////////////

#include <TCanvas.h>
#include "MEG.h"
#include <include/generated/MEGTTDCAverage.h>
#include "Riostream.h"

ClassImp(MEGTTDCAverage)

void MEGTTDCAverage::Init()
{
}

void MEGTTDCAverage::BeginOfRun()
{
}

void MEGTTDCAverage::Event()
{
   int nPMT = gAnalyzer->GetGSP()->GetPMT()->GetNumbers()->GetNumberOfPMT();
   float invalid = gAnalyzer->GetGSP()->GetInvalidValue();

   float sum = 0;
   int nsum = 0;
   Bool_t corrupt = false;
   for (int j=0;j<nPMT&&!corrupt;j++) {
      MEGCMPMTData *pmtData = gAnalyzer->GetCMPMTDataAt(j);
      MEGCMPMTInfo *pmtInfo = gAnalyzer->GetCMPMTInfoAt(j);
      if (pmtInfo!=NULL) {
         if (pmtInfo->GetAddress().Length()>0) {
            if (pmtInfo->GetAddress()[0]=='F') {
               if (pmtData->GetTDCData()!=invalid) {
                  sum = sum + pmtData->GetTDCData();
                  nsum++;
               }
               else corrupt = true;
            }
         }
      }
   }

   if (!corrupt) FillTDCAverageHisto(sum/nsum);
}

void MEGTTDCAverage::EndOfRun()
{
   if (gAnalyzer->isBatchMode()) return;
//   TCanvas *c1 = new TCanvas("c1","Average of Frontface TDCs",600,400);

//   this->DrawTDCAverageHisto();
}

void MEGTTDCAverage::Terminate()
{
}

