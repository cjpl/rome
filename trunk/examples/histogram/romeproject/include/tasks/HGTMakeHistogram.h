////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// This file has been generated by the ROMEBuilder.                           //
// Manual changes to this file will always be overwritten by the builder.     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#ifndef HGTMakeHistogram_H
#define HGTMakeHistogram_H

#include<TH1.h>
#include<TH2.h>
#include<TH3.h>
#include<ROMETask.h>
#include <include/framework/HGAnalyzer.h>

class HGTMakeHistogram : public ROMETask
{
protected:
   TH1F*      fhAdc0;  // ADC0
   bool       fhAdc0Accumulation; // Accumulation Flag for the hAdc0
public:
   // Constructor
   HGTMakeHistogram(const char *name,const char *title):ROMETask(name,title)
   { fEventID = '1'; fVersion = 1; fHasHistograms = true; fhAdc0Accumulation = true; };
   // User Methods
   void FillhAdc0(double x,double weight=1) { fhAdc0->Fill(x,weight); };
   void DrawhAdc0() { fhAdc0->Draw(); };
   TH1F* GethAdc0() { return fhAdc0; };
   Bool_t ishAdc0Accumulation() { return fhAdc0Accumulation; };
   void SethAdc0Accumulation(Bool_t flag) { fhAdc0Accumulation = flag; };
protected:
   // Event Methods
   virtual void Init();
   virtual void BeginOfRun();
   virtual void Event();
   virtual void EndOfRun();
   virtual void Terminate();

   // Histo Methods
   virtual void BookHisto();
   virtual void ResetHisto();


   ClassDef(HGTMakeHistogram,1)
};

inline void HGTMakeHistogram::BookHisto() {
   TFolder *ADCFolder = GetHistoFolder()->AddFolder("ADC","ADC");
   fhAdc0 = new TH1F("hAdc0","ADC0",3996,10,3996);
   ADCFolder->Add(fhAdc0);
   fhAdc0->GetXaxis()->SetTitle("");
   fhAdc0->GetYaxis()->SetTitle("");
   fhAdc0->GetZaxis()->SetTitle("");
}

inline void HGTMakeHistogram::ResetHisto() {
   if (!ishAdc0Accumulation()) fhAdc0->Reset();
}

#endif   // HGTMakeHistogram_H
