/********************************************************************

  main.cpp, Ryu Sawada

  $Id$

********************************************************************/
#include <Riostream.h>
#include <TSystem.h>
#include <TTimeStamp.h>
#include "ROMEString.h"

//------
// change following values when release
const Int_t romeMajor = 2;
const Int_t romeMinor = 5;
const Int_t isStableVersion = 0; // 0: development version, 1: stable version
//------

const char* const monthName[] = {
   "Jan"
   , "Feb"
   , "Mar"
   , "Apr"
   , "May"
   , "Jun"
   , "Jul"
   , "Aug"
   , "Sep"
   , "Oct"
   , "Nov"
   , "Dec"
};

Int_t GetROMEVersion(Int_t a, Int_t b) { return (a << 8) + b; }

void ParseSVNKeyword(ROMEString& str)
{
   // extract Subversion revision number from string.
   if (!str.BeginsWith("$") || !str.EndsWith(" $")) // This isn't Subversion keyword
      return;

   if (str.BeginsWith("$Rev: "))                      str.Remove(0, 6);
   else if (str.BeginsWith("$Revision: "))            str.Remove(0, 11);
   else if (str.BeginsWith("$LastChangedRevision: ")) str.Remove(0, 22);
   else{
      cerr << "Warning: ROMEBuilder does not support keyword '"<<str<<"'"<<endl;
      return;
   }
   str.Remove(str.Length()-2, 2);
   return;
}

int main(int argc, char *argv[])
{
   // overwrite ROMEVersion.h when development version.
   if (isStableVersion)
      return 0;

   ROMEString hfile = gSystem->ExpandPathName("$(ROMESYS)/include/");
   hfile.AppendFormatted("ROMEVersion.h");
   ROMEString buffer;

   // get current revision
   ifstream currentH(hfile.Data());
   if (!currentH.good()) {
      cerr<<"failed to open "<<hfile<<" for read."<<endl;
      return 1;
   }
   buffer.ReadFile(currentH);
   currentH.close();
   Int_t pos1, pos2;
   pos1 = buffer.Index("ROME_REVISION");
   pos2 = buffer.Index("\n", 1, pos1 + 1, TString::kExact);
   TString revLine = buffer(pos1, pos2 - pos1);
   pos1 = revLine.Index("$");
   pos2 = revLine.Index("$", 1, pos1 + 1, TString::kExact);
   ROMEString revNumber = revLine(pos1, pos2 - pos1 + 1);
   ParseSVNKeyword(revNumber);

   // current time
   TTimeStamp timestamp;
   UInt_t year;
   UInt_t month;
   UInt_t day;
   UInt_t hour;
   UInt_t min;
   UInt_t sec;
   timestamp.Set();
   timestamp.GetDate(kTRUE, 0, &year, &month, &day);
   timestamp.GetTime(kTRUE, 0, &hour, &min, &sec);

   // prepare new file.
   buffer.Resize(0);
   buffer.AppendFormatted("#ifndef ROMEVersion\n");
   buffer.AppendFormatted("#define ROMEVersion\n");
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("/* Version information automatically generated by installer. */\n");
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("/*\n");
   buffer.AppendFormatted(" * These macros can be used in the following way:\n");
   buffer.AppendFormatted(" *\n");
   buffer.AppendFormatted(" *    #if ROME_VERSION_CODE >= ROME_VERSION(2,5)\n");
   buffer.AppendFormatted(" *       #include <newheader.h>\n");
   buffer.AppendFormatted(" *    #else\n");
   buffer.AppendFormatted(" *       #include <oldheader.h>\n");
   buffer.AppendFormatted(" *    #endif\n");
   buffer.AppendFormatted(" *\n");
   buffer.AppendFormatted("*/\n");
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("#define ROME_RELEASE \"%d.%d\"\n", romeMajor, romeMinor);
   buffer.AppendFormatted("#define %s\n", revLine.Data());
   buffer.AppendFormatted("#define ROME_REVISION_CODE %s\n", revNumber.Data());
   buffer.AppendFormatted("#define ROME_STABLE %d\n", isStableVersion);
   buffer.AppendFormatted("#define ROME_RELEASE_DATE \"%s %2d %d\"\n", monthName[month], day, year);
   buffer.AppendFormatted("#define ROME_RELEASE_TIME \"%02d:%02d:%02d\"\n", hour, min, sec);
   buffer.AppendFormatted("#define ROME_VERSION_CODE %d\n", GetROMEVersion(romeMajor, romeMinor));
   buffer.AppendFormatted("#define ROME_VERSION(a,b) (((a) << 8) + (b))\n");
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("#endif\n");

   // write file
   ofstream versionH(hfile.Data());
   if (!versionH.good()) {
      cerr<<"failed to open "<<hfile<<" for write."<<endl;
      return 1;
   }
   versionH<<buffer;
   versionH.close();

   return 0;
}
