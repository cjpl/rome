/********************************************************************

  BuilderConfig.cpp, Ryu Sawada

  $Log$
  Revision 1.1  2005/01/29 22:45:07  sawada
  Initial revision


********************************************************************/
#include "ArgusBuilder.h"

bool ArgusBuilder::WriteConfigCpp() {
   int i;
   ROMEString cppFile;
   ROMEString buffer;
   char fileBuffer[bufferLength];
   int lenTot,j,ll;
   char* pos;
   int fileHandle;
   ROMEString format;
   ROMEString classDescription;
   classDescription.SetFormatted("This class handles the monitor configuration file (argusConfig.xml).");
   // File name
   cppFile.SetFormatted("%s/src/monitor/%sConfig.cpp",outDir.Data(),shortCut.Data());
   // Description
   buffer.Resize(0);
   buffer.AppendFormatted("//// Author: %s\n",mainAuthor.Data());
   buffer.AppendFormatted("////////////////////////////////////////////////////////////////////////////////\n");
   buffer.AppendFormatted("//                                                                            //\n");
   ll = 74-shortCut.Length();
   format.SetFormatted("// %%s%%-%d.%ds //\n",ll,ll);
   buffer.AppendFormatted((char*)format.Data(),shortCut.Data(),"Monitor");
   buffer.AppendFormatted("//                                                                            //\n");
   pos = (char*)classDescription.Data();
   lenTot = classDescription.Length();
   while (pos-classDescription.Data() < lenTot) {
      if (lenTot+(classDescription.Data()-pos)<74) 
         i=lenTot+(classDescription.Data()-pos);
      else for (i=74;pos[i]!=32&&i>0;i--) {}
      if (i<=0) 
         i=TMath::Min(75,lenTot);
      pos[i] = 0;
      buffer.AppendFormatted("// %-74.74s   \n",pos);
      pos = pos+i+1;
   }
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("// This file has been generated by the ArgusBuilder.                          //\n");
   buffer.AppendFormatted("// Manual changes to this file will always be overwritten by the builder.     //\n");
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("////////////////////////////////////////////////////////////////////////////////\n\n");
   // Header
   buffer.AppendFormatted("#include <ROMEXMLDataBase.h>\n");
   buffer.AppendFormatted("#ifdef HAVE_SQL\n");
   buffer.AppendFormatted("#include <ROMESQLDataBase.h>\n");
   buffer.AppendFormatted("#endif\n");
   buffer.AppendFormatted("#include \"include/monitor/%sConfig.h\"\n",shortCut.Data());
   buffer.AppendFormatted("#include \"include/monitor/%sMonitor.h\"\n",shortCut.Data());
   buffer.AppendFormatted("#include \"include/monitor/%sWindow.h\"\n",shortCut.Data());
   // Constructor
   buffer.AppendFormatted("\n// Constructor\n");
   buffer.AppendFormatted("%sConfig::%sConfig() {\n",shortCut.Data(),shortCut.Data());
   buffer.AppendFormatted("   fConfigData = new ConfigData*[1];\n");
   buffer.AppendFormatted("   fConfigData[0] = new ConfigData();\n");
   buffer.AppendFormatted("}\n\n");
   // Read Configuration File
   buffer.AppendFormatted("\n// Read Configuration File\n");
   buffer.AppendFormatted("bool %sConfig::ReadConfigurationFile(char *file) {\n",shortCut.Data());
   buffer.AppendFormatted("   fXMLFile = file;\n");
   buffer.AppendFormatted("   ROMEXML *xml = new ROMEXML();\n");
   buffer.AppendFormatted("   xml->OpenFileForPath(fXMLFile);\n");
   buffer.AppendFormatted("   fNumberOfRunConfigs = xml->NumberOfOccurrenceOfPath(\"//Configuration/RunConfiguration\");\n");
   buffer.AppendFormatted("   delete [] fConfigData;\n");
   buffer.AppendFormatted("   fConfigData = new ConfigData*[fNumberOfRunConfigs+1];\n");
   buffer.AppendFormatted("   fConfigData[0] = new ConfigData();\n");
   buffer.AppendFormatted("   ROMEString path = \"//Configuration/MainConfiguration\";\n");
   buffer.AppendFormatted("   ReadConfiguration(xml,path,0);\n");
   buffer.AppendFormatted("   if (!SetConfiguration(0,0))\n");
   buffer.AppendFormatted("      return false;\n");
   buffer.AppendFormatted("   for (int i=0;i<fNumberOfRunConfigs;i++) {\n");
   buffer.AppendFormatted("      fConfigData[i+1] = new ConfigData();\n");
   buffer.AppendFormatted("      path.SetFormatted(\"//Configuration/child::RunConfiguration[position()=%%d]\",i+1);\n");
   buffer.AppendFormatted("      ReadConfiguration(xml,path,i+1);\n");
   buffer.AppendFormatted("   }\n");
   buffer.AppendFormatted("   delete xml;\n");
   buffer.AppendFormatted("   return true;\n");
   buffer.AppendFormatted("}\n\n");
   // Read Configuration
   buffer.AppendFormatted("\n// Read Configuration\n");
   buffer.AppendFormatted("bool %sConfig::ReadConfiguration(ROMEXML *xml,ROMEString& path,int index) {\n",shortCut.Data());
   // Window
   buffer.AppendFormatted("   // window\n");
   buffer.AppendFormatted("   fConfigData[index]->fWindow = new ConfigData::Window();\n");
   // Window/Size
   buffer.AppendFormatted("   xml->GetPathValue(path+\"/Window/Size\",fConfigData[index]->fWindow->fSize,\"\");\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fWindow->fSize==\"\")\n");
   buffer.AppendFormatted("      fConfigData[index]->fWindow->fSizeModified = false;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fWindow->fSizeModified = true;\n");
   // Window/Style
   buffer.AppendFormatted("   xml->GetPathValue(path+\"/Window/Style\",fConfigData[index]->fWindow->fStyle,\"\");\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fWindow->fStyle==\"\")\n");
   buffer.AppendFormatted("      fConfigData[index]->fWindow->fStyleModified = false;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fWindow->fStyleModified = true;\n");
   // --Window
   buffer.AppendFormatted("   if (fConfigData[index]->fWindow->fSizeModified ||\n");
   buffer.AppendFormatted("       fConfigData[index]->fWindow->fStyleModified)\n");
   buffer.AppendFormatted("      fConfigData[index]->fWindowModified = true;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fWindowModified = false;\n");
   // DataBase
   buffer.AppendFormatted("   // database\n");
   buffer.AppendFormatted("   fConfigData[index]->fDataBase = new ConfigData::DataBase();\n");
   // DataBase/Type
   buffer.AppendFormatted("   xml->GetPathValue(path+\"/DataBase/Type\",fConfigData[index]->fDataBase->fType,\"\");\n");
   buffer.AppendFormatted("   fConfigData[index]->fDataBase->fType.ToLower();\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fDataBase->fType==\"\")\n");
   buffer.AppendFormatted("      fConfigData[index]->fDataBase->fTypeModified = false;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fDataBase->fTypeModified = true;\n");
   // DataBase/Connection
   buffer.AppendFormatted("   xml->GetPathValue(path+\"/DataBase/Connection\",fConfigData[index]->fDataBase->fConnection,\"\");\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fDataBase->fConnection==\"\")\n");
   buffer.AppendFormatted("      fConfigData[index]->fDataBase->fConnectionModified = false;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fDataBase->fConnectionModified = true;\n");
   // --DataBase
   buffer.AppendFormatted("   if (fConfigData[index]->fDataBase->fTypeModified ||\n");
   buffer.AppendFormatted("       fConfigData[index]->fDataBase->fConnectionModified)\n");
   buffer.AppendFormatted("      fConfigData[index]->fDataBaseModified = true;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fDataBaseModified = false;\n");
   // Online
   buffer.AppendFormatted("   // online\n");
   buffer.AppendFormatted("   fConfigData[index]->fOnline = new ConfigData::Online();\n");
   // Online/Host
   buffer.AppendFormatted("   xml->GetPathValue(path+\"/Online/Host\",fConfigData[index]->fOnline->fHost,\"\");\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fOnline->fHost==\"\")\n");
   buffer.AppendFormatted("      fConfigData[index]->fOnline->fHostModified = false;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fOnline->fHostModified = true;\n");
   // Online/Experiment
   buffer.AppendFormatted("   xml->GetPathValue(path+\"/Online/Experiment\",fConfigData[index]->fOnline->fExperiment,\"\");\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fOnline->fExperiment==\"\")\n");
   buffer.AppendFormatted("      fConfigData[index]->fOnline->fExperimentModified = false;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fOnline->fExperimentModified = true;\n");
   // --Online
   buffer.AppendFormatted("   if (fConfigData[index]->fOnline->fHostModified ||\n");
   buffer.AppendFormatted("       fConfigData[index]->fOnline->fExperimentModified)\n");
   buffer.AppendFormatted("      fConfigData[index]->fOnlineModified = true;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fOnlineModified = false;\n");
   // NetFolder
   buffer.AppendFormatted("   // NetFolder\n");
   buffer.AppendFormatted("   fConfigData[index]->fNetFolder = new ConfigData::NetFolder();\n");
   // NetFolder/Host
   buffer.AppendFormatted("   xml->GetPathValue(path+\"/NetFolder/Host\",fConfigData[index]->fNetFolder->fHost,\"\");\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fNetFolder->fHost==\"\")\n");
   buffer.AppendFormatted("      fConfigData[index]->fNetFolder->fHostModified = false;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fNetFolder->fHostModified = true;\n");
   // NetFolder/PortNumber
   buffer.AppendFormatted("   xml->GetPathValue(path+\"/NetFolder/PortNumber\",fConfigData[index]->fNetFolder->fPortNumber,\"\");\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fNetFolder->fPortNumber==\"\")\n");
   buffer.AppendFormatted("      fConfigData[index]->fNetFolder->fPortNumberModified = false;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fNetFolder->fPortNumberModified = true;\n");
   // --NetFolder
   buffer.AppendFormatted("   if (fConfigData[index]->fNetFolder->fHostModified ||\n");
   buffer.AppendFormatted("       fConfigData[index]->fNetFolder->fPortNumberModified)\n");
   buffer.AppendFormatted("      fConfigData[index]->fNetFolderModified = true;\n");
   buffer.AppendFormatted("   else\n");
   buffer.AppendFormatted("      fConfigData[index]->fNetFolderModified = false;\n");
   // tabs
   buffer.AppendFormatted("   // tabs\n");
   buffer.AppendFormatted("   fConfigData[index]->fTabsModified = false;\n");
   ROMEString pointer;
   ROMEString path;
   ROMEString classname;
   for (i=0;i<numOfTabHierarchy;i++) {
      buffer.AppendFormatted("   // %s Tab\n",tabHierarchyName[i].Data());
      int index = i;
      pointer.Resize(0);
      path.Resize(0);
      classname.Resize(0);
      while (index!=-1) {
         pointer.InsertFormatted(0,"->f%sTab",tabHierarchyName[index].Data());
         path.InsertFormatted(0,"/child::Tab[child::TabName='%s']",tabHierarchyName[index].Data());
         classname.InsertFormatted(0,"::%sTab",tabHierarchyName[index].Data());
         index = tabHierarchyParentIndex[index];
      }
      buffer.AppendFormatted("   fConfigData[index]%s = new ConfigData%s();\n",pointer.Data(),classname.Data());
      // Active
      buffer.AppendFormatted("   xml->GetPathValue(path+\"/Tabs%s/Active\",fConfigData[index]%s->fActive,\"\");\n",path.Data(),pointer.Data());
      buffer.AppendFormatted("   if (fConfigData[index]%s->fActive==\"\")\n",pointer.Data());
      buffer.AppendFormatted("      fConfigData[index]%s->fActiveModified = false;\n",pointer.Data());
      buffer.AppendFormatted("   else\n");
      buffer.AppendFormatted("      fConfigData[index]%s->fActiveModified = true;\n",pointer.Data());
      // Steering parameter
      if (numOfSteering[tabHierarchyClassIndex[i]]>0) {
         buffer.AppendFormatted("   // steering parameters\n");
         buffer.AppendFormatted("   fConfigData[index]%s->fSteering = new ConfigData%s::Steering();\n",pointer.Data(),classname.Data());
         ROMEString pathT;
         ROMEString pointerT;
         ROMEString classT;
         pathT.SetFormatted("path+\"/Tabs%s",path.Data());
         pointerT.SetFormatted("fConfigData[index]%s->fSteering",pointer.Data());
         classT.SetFormatted("ConfigData%s::Steering",classname.Data());
         WriteSteeringConfigRead(buffer,0,tabHierarchyClassIndex[i],xml,pathT,pointerT,classT);
      }
      // all
      buffer.AppendFormatted("   if (fConfigData[index]%s->fActiveModified",pointer.Data());
      if (numOfSteering[tabHierarchyClassIndex[i]]>0)
         buffer.AppendFormatted("\n    || fConfigData[index]%s->fSteeringModified",pointer.Data());
      buffer.AppendFormatted(") {\n");
      buffer.AppendFormatted("      fConfigData[index]->fTabsModified = true;\n");
      buffer.AppendFormatted("      fConfigData[index]%sModified = true;\n",pointer.Data());
      ROMEString tempPointer = pointer;
      while (true) {
         for (j=tempPointer.Length()-1;tempPointer[j]!='>' && j>0;j--) {}
         if (j<=1) 
            break;
         tempPointer = tempPointer(0,j-1);
         buffer.AppendFormatted("      fConfigData[index]%sModified = true;\n",tempPointer.Data());
      }
      buffer.AppendFormatted("   }\n");
      buffer.AppendFormatted("   else\n");
      buffer.AppendFormatted("      fConfigData[index]%sModified = false;\n",pointer.Data());
   }
   // Global Steering Parameters
   if (numOfSteering[numOfTabHierarchy]>0) {
      buffer.AppendFormatted("   // global steering parameters\n");
      buffer.AppendFormatted("   fConfigData[index]->fGlobalSteering = new ConfigData::GlobalSteering();\n");
      ROMEString pathT;
      ROMEString pointerT;
      ROMEString classT;
      pathT.SetFormatted("path+\"/GlobalSteeringParameters");
      pointerT.SetFormatted("fConfigData[index]->fGlobalSteering");
      classT.SetFormatted("ConfigData::GlobalSteering");
      WriteSteeringConfigRead(buffer,0,numOfTabHierarchy,xml,pathT,pointerT,classT);
   }
   buffer.AppendFormatted("   return true;\n");
   buffer.AppendFormatted("}\n\n");
   // Check Configuration
   buffer.AppendFormatted("\n// Check Configuration\n");
   buffer.AppendFormatted("bool %sConfig::CheckConfiguration(int runNumber) {\n",shortCut.Data());
   buffer.AppendFormatted("   if (fActiveConfiguration!=0) {\n");
   buffer.AppendFormatted("      if (!SetConfiguration(fActiveConfiguration,0))\n");
   buffer.AppendFormatted("         return false;\n");
   buffer.AppendFormatted("   }\n");
   buffer.AppendFormatted("   return true;\n");
   buffer.AppendFormatted("}\n\n");
   // Set Configuration
   buffer.AppendFormatted("\n// Set Configuration\n");
   buffer.AppendFormatted("bool %sConfig::SetConfiguration(int modIndex,int index) {\n",shortCut.Data());
   buffer.AppendFormatted("   char* cstop;\n");
   buffer.AppendFormatted("   fActiveConfiguration = index;\n");
   // Window
   buffer.AppendFormatted("   if (fConfigData[modIndex]->fWindow->fSizeModified) {\n");
   buffer.AppendFormatted("      gMonitor->SetWindowSize(atof(fConfigData[index]->fWindow->fSize.Data()));\n");
   buffer.AppendFormatted("   }\n");
   buffer.AppendFormatted("   if (fConfigData[modIndex]->fWindow->fStyle) {\n");
   buffer.AppendFormatted("      gMonitor->SetWindowStyle(fConfigData[index]->fWindow->fStyle);\n");
   buffer.AppendFormatted("   }\n");
   // DataBase
   buffer.AppendFormatted("   if (fConfigData[modIndex]->fDataBase->fConnectionModified) {\n");
   buffer.AppendFormatted("      gMonitor->SetDataBaseConnection(fConfigData[index]->fDataBase->fConnection);\n");
   buffer.AppendFormatted("   }\n");
   buffer.AppendFormatted("   if (fConfigData[modIndex]->fDataBase->fTypeModified) {\n");
   buffer.AppendFormatted("      if (fConfigData[index]->fDataBase->fType==\"sql\") {\n");
   buffer.AppendFormatted("#ifdef HAVE_SQL\n");
   buffer.AppendFormatted("         delete gMonitor->GetDataBase();\n");
   buffer.AppendFormatted("         gMonitor->SetDataBase(new ROMESQLDataBase());\n");
   buffer.AppendFormatted("         if (!gMonitor->GetDataBase()->Init(\"\",gMonitor->GetDataBaseConnection()))\n");
   buffer.AppendFormatted("            return false;\n");
   buffer.AppendFormatted("#endif\n");
   buffer.AppendFormatted("      }\n");
   buffer.AppendFormatted("      else if (fConfigData[index]->fDataBase->fType==\"xml\") {\n");
   buffer.AppendFormatted("         delete gMonitor->GetDataBase();\n");
   buffer.AppendFormatted("         gMonitor->SetDataBase(new ROMEXMLDataBase());\n");
   buffer.AppendFormatted("         ROMEString str = gMonitor->GetDataBaseConnection();\n");
   buffer.AppendFormatted("         int index;\n");
   buffer.AppendFormatted("         if ((index=str.Index(\";\",1,0,TString::kExact))==-1) {\n");
   buffer.AppendFormatted("            cout << \"Invalid database connection\" << endl;\n");
   buffer.AppendFormatted("            return false;\n");
   buffer.AppendFormatted("         }\n");
   buffer.AppendFormatted("         ROMEString path = str(0,index);\n");
   buffer.AppendFormatted("         if (path[path.Length()-1]!='/' && path[path.Length()-1]!='\\\\')\n");
   buffer.AppendFormatted("            path += \"/\";\n");
   buffer.AppendFormatted("         gMonitor->SetDataBaseDir((char*)path.Data());\n");
   buffer.AppendFormatted("         if (!gMonitor->GetDataBase()->Init(gMonitor->GetDataBaseDir(),((TString)str(index+1,str.Length()-index-1)).Data()))\n");
   buffer.AppendFormatted("            return false;\n");
   buffer.AppendFormatted("      }\n");
   buffer.AppendFormatted("   }\n");
   // Online
   buffer.AppendFormatted("   // online\n");
   buffer.AppendFormatted("   if (fConfigData[modIndex]->fOnline->fHostModified)\n");
   buffer.AppendFormatted("      gMonitor->SetOnlineHost((char*)fConfigData[index]->fOnline->fHost.Data());\n");
   buffer.AppendFormatted("   if (fConfigData[modIndex]->fOnline->fExperimentModified)\n");
   buffer.AppendFormatted("      gMonitor->SetOnlineExperiment((char*)fConfigData[index]->fOnline->fExperiment.Data());\n");
   // NetFolder
   buffer.AppendFormatted("   // NetFolder\n");
   buffer.AppendFormatted("   if (fConfigData[modIndex]->fNetFolder->fHostModified)\n");
   buffer.AppendFormatted("      gMonitor->SetNetFolderHost((char*)fConfigData[index]->fNetFolder->fHost.Data());\n");
   buffer.AppendFormatted("   if (fConfigData[modIndex]->fNetFolder->fPortNumberModified)\n");
   buffer.AppendFormatted("      gMonitor->SetNetFolderPortNumber((char*)fConfigData[index]->fNetFolder->fPortNumber.Data());\n");
   // Tabs
   buffer.AppendFormatted("   // tabs\n");
   for (i=0;i<numOfTabHierarchy;i++) {
      buffer.AppendFormatted("   // %s tab\n",tabHierarchyName[i].Data());
      int index = i;
      pointer.Resize(0);
      while (index!=-1) {
         pointer.InsertFormatted(0,"->f%sTab",tabHierarchyName[index].Data());
         index = tabHierarchyParentIndex[index];
      }
      // Steering parameter
      if (numOfSteering[tabHierarchyClassIndex[i]]>0) {
         buffer.AppendFormatted("   // steering parameters\n");
         ROMEString pointerT;
         ROMEString steerPointerT;
         pointerT.SetFormatted("%s->fSteering",pointer.Data());
         steerPointerT.SetFormatted("((%sT%s*) gWindow->Get%s%03dTab())->GetSP()",shortCut.Data(),tabName[tabHierarchyClassIndex[i]].Data(),tabHierarchyName[i].Data(),i);
         WriteSteeringConfigSet(buffer,0,tabHierarchyClassIndex[i],pointerT,steerPointerT);
      }
   }
   // Global Steering Parameter
   buffer.AppendFormatted("   // global steering parameters\n");
   if (numOfSteering[numOfTabHierarchy]>0) {
      ROMEString pointerT;
      ROMEString steerPointerT;
      pointerT.SetFormatted("->fGlobalSteering");
      steerPointerT.SetFormatted("gMonitor->GetGSP()");
      WriteSteeringConfigSet(buffer,0,numOfTabHierarchy,pointerT,steerPointerT);
   }
   buffer.AppendFormatted("   return true;\n");
   buffer.AppendFormatted("}\n\n");
   // Write Configuration File
   buffer.AppendFormatted("\n// Write Configuration File\n");
   buffer.AppendFormatted("bool %sConfig::WriteConfigurationFile(char *file) {\n",shortCut.Data());
   buffer.AppendFormatted("   fXMLFile = file;\n");
   buffer.AppendFormatted("   ROMEXML *xml = new ROMEXML();\n");
   buffer.AppendFormatted("   ROMEString str;\n");
   buffer.AppendFormatted("   if (!xml->OpenFileForWrite(fXMLFile))\n");
   buffer.AppendFormatted("      return false;\n");
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("   xml->StartElement(\"Configuration\");\n");
   buffer.AppendFormatted("   xml->WriteAttribute(\"xmlns:xsi\",\"http://www.w3.org/2001/XMLSchema-instance\");\n");
   buffer.AppendFormatted("   xml->WriteAttribute(\"xsi:noNamespaceSchemaLocation\",\"c:/Argus/ArgusConfig.xsd\");\n");
   buffer.AppendFormatted("   xml->StartElement(\"MainConfiguration\");\n");
   buffer.AppendFormatted("   WriteConfiguration(xml,0);\n");
   buffer.AppendFormatted("   xml->EndElement();\n");
   buffer.AppendFormatted("   for (int i=0;i<fNumberOfRunConfigs;i++) {\n");
   buffer.AppendFormatted("      xml->StartElement(\"RunConfiguration\");\n");
   buffer.AppendFormatted("      WriteConfiguration(xml,i+1);\n");
   buffer.AppendFormatted("      xml->EndElement();\n");
   buffer.AppendFormatted("   }\n");
   buffer.AppendFormatted("   xml->EndDocument();\n");
   buffer.AppendFormatted("   delete xml;\n");
   buffer.AppendFormatted("   return true;\n");
   buffer.AppendFormatted("}\n");
   // Write Configuration
   buffer.AppendFormatted("\n// Write Configuration\n");
   buffer.AppendFormatted("bool %sConfig::WriteConfiguration(ROMEXML *xml,int index) {\n",shortCut.Data());
   buffer.AppendFormatted("   ROMEString str = \"\";\n");
   // Window
   buffer.AppendFormatted("   // window\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fWindowModified || index==0) {\n");
   buffer.AppendFormatted("      xml->StartElement(\"Window\");\n");
   // Window/Size
   buffer.AppendFormatted("      if (index==0){\n");
   buffer.AppendFormatted("         str.SetFormatted(\"%%2.1f\",gMonitor->GetWindowSize());\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Size\",(char*)str.Data());\n");
   buffer.AppendFormatted("      }\n");
   buffer.AppendFormatted("      else if (fConfigData[index]->fWindow->fSizeModified)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Size\",(char*)fConfigData[index]->fWindow->fSize.Data());\n");
   // Window/Style
   buffer.AppendFormatted("      if (index==0)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Style\",gMonitor->GetWindowStyle());\n");
   buffer.AppendFormatted("      else if (fConfigData[index]->fWindow->fStyleModified)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Style\",(char*)fConfigData[index]->fWindow->fStyle.Data());\n");
   buffer.AppendFormatted("      xml->EndElement();\n");
   buffer.AppendFormatted("   }\n");
   // DataBase
   buffer.AppendFormatted("   // database\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fDataBaseModified || index==0) {\n");
   buffer.AppendFormatted("      xml->StartElement(\"DataBase\");\n");
   // DataBase/Type
   buffer.AppendFormatted("      if (index==0)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Type\",gMonitor->GetDataBase()->GetType());\n");
   buffer.AppendFormatted("      else if (fConfigData[index]->fDataBase->fTypeModified)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Type\",(char*)fConfigData[index]->fDataBase->fType.Data());\n");
   // DataBase/Connection
   buffer.AppendFormatted("      if (index==0)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Connection\",gMonitor->GetDataBaseConnection());\n");
   buffer.AppendFormatted("      else if (fConfigData[index]->fDataBase->fConnectionModified)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Connection\",(char*)fConfigData[index]->fDataBase->fConnection.Data());\n");
   buffer.AppendFormatted("      xml->EndElement();\n");
   buffer.AppendFormatted("   }\n");
   // Online
   buffer.AppendFormatted("   // online\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fOnlineModified || index==0) {\n");
   buffer.AppendFormatted("      xml->StartElement(\"Online\");\n");
   // Online/Host
   buffer.AppendFormatted("      if (index==0)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Host\",gMonitor->GetOnlineHost());\n");
   buffer.AppendFormatted("      else if (fConfigData[index]->fOnline->fHostModified)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Host\",(char*)fConfigData[index]->fOnline->fHost.Data());\n");
   // Online/Experiment
   buffer.AppendFormatted("      if (index==0)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Experiment\",gMonitor->GetOnlineExperiment());\n");
   buffer.AppendFormatted("      else if (fConfigData[index]->fOnline->fExperimentModified)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Experiment\",(char*)fConfigData[index]->fOnline->fExperiment.Data());\n");
   buffer.AppendFormatted("      xml->EndElement();\n");
   buffer.AppendFormatted("   }\n");
   // NetFolder
   buffer.AppendFormatted("   // NetFolder\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fNetFolderModified || index==0) {\n");
   buffer.AppendFormatted("      xml->StartElement(\"NetFolder\");\n");
   // NetFolder/Host
   buffer.AppendFormatted("      if (index==0)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Host\",gMonitor->GetNetFolderHost());\n");
   buffer.AppendFormatted("      else if (fConfigData[index]->fNetFolder->fHostModified)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"Host\",(char*)fConfigData[index]->fNetFolder->fHost.Data());\n");
   // NetFolder/PortNumber
   buffer.AppendFormatted("      if (index==0) {\n");
   buffer.AppendFormatted("         str.SetFormatted(\"%%d\",gMonitor->GetNetFolderPortNumber());\n");
   buffer.AppendFormatted("         xml->WriteElement(\"PortNumber\",(char*)str.Data());\n");
   buffer.AppendFormatted("      }\n");
   buffer.AppendFormatted("      else if (fConfigData[index]->fNetFolder->fPortNumberModified)\n");
   buffer.AppendFormatted("         xml->WriteElement(\"PortNumber\",(char*)fConfigData[index]->fNetFolder->fPortNumber.Data());\n");
   // Tabs
   buffer.AppendFormatted("      xml->EndElement();\n");
   buffer.AppendFormatted("   }\n");
   buffer.AppendFormatted("   // tabs\n");
   buffer.AppendFormatted("   if (fConfigData[index]->fTabsModified || index==0) {\n");
   buffer.AppendFormatted("      xml->StartElement(\"Tabs\");\n");
   pointer.Resize(0);
   WriteTabConfigWrite(buffer,-1,pointer,0);
   buffer.AppendFormatted("      xml->EndElement();\n");
   buffer.AppendFormatted("   }\n");
   // Global Steering Parameter
   buffer.AppendFormatted("   // global steering parameters\n");
   if (numOfSteering[numOfTabHierarchy]>0) {
      buffer.AppendFormatted("   if (fConfigData[index]->fGlobalSteeringModified || index==0) {\n");
      buffer.AppendFormatted("      ROMEString value;\n");
      buffer.AppendFormatted("      xml->StartElement(\"GlobalSteeringParameters\");\n");
      ROMEString pointerT;
      ROMEString steerPointerT;
      pointerT.SetFormatted("fConfigData[index]->fGlobalSteering");
      steerPointerT.SetFormatted("gMonitor->GetGSP()");
      WriteSteeringConfigWrite(buffer,0,numOfTabHierarchy,pointerT,steerPointerT,1);
   }
   if (numOfSteering[numOfTabHierarchy]>0) {
      buffer.AppendFormatted("      xml->EndElement();\n");
      buffer.AppendFormatted("   }\n");
   }
   buffer.AppendFormatted("   return true;\n");
   buffer.AppendFormatted("}\n");
   // Close cpp-File
   fileHandle = open(cppFile.Data(),O_RDONLY);
   int nb = read(fileHandle,&fileBuffer, sizeof(fileBuffer));
   bool identical = true;
   if (nb==(int)buffer.Length()) {
      for (i=0;i<nb&&i<(int)buffer.Length();i++) {
         if (buffer[i] != fileBuffer[i]) {
            identical = false;
            break;
         }
      }
   }
   else
     identical = false;
   if (!identical) {
      fileHandle = open(cppFile.Data(),O_TRUNC  | O_CREAT,S_IREAD | S_IWRITE  );
      close(fileHandle);
      fileHandle = open(cppFile.Data(),O_RDWR  | O_CREAT,S_IREAD | S_IWRITE  );
      if (makeOutput) cout << "      " << cppFile.Data() << endl;
      nb = write(fileHandle,buffer.Data(), buffer.Length());
      close(fileHandle);
   }
   return true;
}

bool ArgusBuilder::WriteConfigH() {
   int i;
   ROMEString hFile;
   ROMEString buffer;
   char fileBuffer[bufferLength];
   int nb;
   int fileHandle;
   // File name
   hFile.SetFormatted("%s/include/monitor/%sConfig.h",outDir.Data(),shortCut.Data());
   // Description
   buffer.Resize(0);
   buffer.AppendFormatted("////////////////////////////////////////////////////////////////////////////////\n");
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("// This file has been generated by the ArgusBuilder.                          //\n");
   buffer.AppendFormatted("// Manual changes to this file will always be overwritten by the builder.     //\n");
   buffer.AppendFormatted("//                                                                            //\n");
   buffer.AppendFormatted("////////////////////////////////////////////////////////////////////////////////\n\n");
   // Header
   buffer.AppendFormatted("#ifndef %sConfig_H\n",shortCut.Data());
   buffer.AppendFormatted("#define %sConfig_H\n\n",shortCut.Data());
   buffer.AppendFormatted("#include <ROMEString.h>\n");
   buffer.AppendFormatted("#ifndef __CINT__\n");
   buffer.AppendFormatted("#include <ROMEXML.h>\n");
   buffer.AppendFormatted("#endif\n");
   buffer.AppendFormatted("#include <ArgusConfig.h>\n");
   // Class
   buffer.AppendFormatted("\nclass %sConfig : public ArgusConfig\n",shortCut.Data());
   buffer.AppendFormatted("{\n");
   buffer.AppendFormatted("#ifndef __CINT__\n");
   // sub classes
   buffer.AppendFormatted("protected:\n");
   buffer.AppendFormatted("   class ConfigData\n");
   buffer.AppendFormatted("   {\n");
   buffer.AppendFormatted("   public:\n");
   // window
   buffer.AppendFormatted("      // window;\n");
   buffer.AppendFormatted("      class Window {\n");
   buffer.AppendFormatted("      public:\n");
   buffer.AppendFormatted("         ROMEString  fSize;\n");
   buffer.AppendFormatted("         bool        fSizeModified;\n");
   buffer.AppendFormatted("         ROMEString  fStyle;\n");
   buffer.AppendFormatted("         bool        fStyleModified;\n");
   buffer.AppendFormatted("      };\n");
   buffer.AppendFormatted("      Window *fWindow;\n");
   buffer.AppendFormatted("      bool   fWindowModified;\n");
   // database
   buffer.AppendFormatted("      // database;\n");
   buffer.AppendFormatted("      class DataBase {\n");
   buffer.AppendFormatted("      public:\n");
   buffer.AppendFormatted("         ROMEString  fType;\n");
   buffer.AppendFormatted("         bool        fTypeModified;\n");
   buffer.AppendFormatted("         ROMEString  fConnection;\n");
   buffer.AppendFormatted("         bool        fConnectionModified;\n");
   buffer.AppendFormatted("      };\n");
   buffer.AppendFormatted("      DataBase *fDataBase;\n");
   buffer.AppendFormatted("      bool   fDataBaseModified;\n");
   // online
   buffer.AppendFormatted("      // online;\n");
   buffer.AppendFormatted("      class Online {\n");
   buffer.AppendFormatted("      public:\n");
   buffer.AppendFormatted("         ROMEString  fHost;\n");
   buffer.AppendFormatted("         bool        fHostModified;\n");
   buffer.AppendFormatted("         ROMEString  fExperiment;\n");
   buffer.AppendFormatted("         bool        fExperimentModified;\n");
   buffer.AppendFormatted("      };\n");
   buffer.AppendFormatted("      Online *fOnline;\n");
   buffer.AppendFormatted("      bool   fOnlineModified;\n");
   // NetFolder
   buffer.AppendFormatted("      // NetFolder;\n");
   buffer.AppendFormatted("      class NetFolder {\n");
   buffer.AppendFormatted("      public:\n");
   buffer.AppendFormatted("         ROMEString  fHost;\n");
   buffer.AppendFormatted("         bool        fHostModified;\n");
   buffer.AppendFormatted("         ROMEString  fPortNumber;\n");
   buffer.AppendFormatted("         bool        fPortNumberModified;\n");
   buffer.AppendFormatted("      };\n");
   buffer.AppendFormatted("      NetFolder *fNetFolder;\n");
   buffer.AppendFormatted("      bool fNetFolderModified;\n");
   // tabs
   buffer.AppendFormatted("      // tabs\n");
   WriteTabConfigClass(buffer,-1,0);
   buffer.AppendFormatted("      bool   fTabsModified;\n");
   // steering parameters
   buffer.AppendFormatted("      class GlobalSteering {\n");
   buffer.AppendFormatted("      public:\n");
   if (numOfSteering[numOfTabHierarchy]>0) {
      WriteSteeringConfigClass(buffer,0,numOfTabHierarchy,2);
   }
   buffer.AppendFormatted("      };\n");
   buffer.AppendFormatted("      GlobalSteering *fGlobalSteering;\n");
   buffer.AppendFormatted("      bool            fGlobalSteeringModified;\n");
   buffer.AppendFormatted("   public:\n");
   // Constructor
   buffer.AppendFormatted("      ConfigData() {\n");
   buffer.AppendFormatted("         fDataBaseModified = false;\n");
   buffer.AppendFormatted("         fOnlineModified = false;\n");
   buffer.AppendFormatted("         fNetFolderModified = false;\n");
   buffer.AppendFormatted("         fTabsModified = false;\n");
   for (i=0;i<numOfTab;i++) {
      buffer.AppendFormatted("         f%sTabModified = false;\n",tabName[i].Data());
      buffer.AppendFormatted("         f%sTab = new %sTab();\n",tabName[i].Data(),tabName[i].Data());
   }
   if (numOfSteering[numOfTabHierarchy]>0) {
      buffer.AppendFormatted("         fGlobalSteeringModified = false;\n");
      buffer.AppendFormatted("         fGlobalSteering = new GlobalSteering();\n");
   }
   buffer.AppendFormatted("      };\n");
   buffer.AppendFormatted("   };\n");
   buffer.AppendFormatted("\n");
   // Fields
   buffer.AppendFormatted("   ConfigData **fConfigData;\n");
   buffer.AppendFormatted("   ROMEString fXMLFile;\n");
   buffer.AppendFormatted("   int   fNumberOfRunConfigs;\n");
   buffer.AppendFormatted("   int   fActiveConfiguration;\n");
   buffer.AppendFormatted("\n");
   // Methods
   buffer.AppendFormatted("public:\n");
   // Constructor
   buffer.AppendFormatted("   %sConfig();\n",shortCut.Data());
   // methods
   buffer.AppendFormatted("   bool WriteConfigurationFile(char *file);\n");
   buffer.AppendFormatted("   bool ReadConfigurationFile(char *file);\n");
   buffer.AppendFormatted("   bool CheckConfiguration(int runNumber);\n",shortCut.Data());
   buffer.AppendFormatted("\n");
   buffer.AppendFormatted("protected:\n");
   buffer.AppendFormatted("   bool ReadConfiguration(ROMEXML *xml,ROMEString& path,int index);\n");
   buffer.AppendFormatted("   bool WriteConfiguration(ROMEXML *xml,int index);\n");
   buffer.AppendFormatted("   bool SetConfiguration(int modIndex,int index);\n");
   buffer.AppendFormatted("\n");
   // Footer
   buffer.AppendFormatted("#endif\n");
   buffer.AppendFormatted("};\n\n");
   buffer.AppendFormatted("#endif   // %sConfig_H\n",shortCut.Data());
   // Write File
   fileHandle = open(hFile.Data(),O_RDONLY);
   nb = read(fileHandle,&fileBuffer, sizeof(fileBuffer));
   bool identical = true;
   if (nb==(int)buffer.Length()) {
      for (i=0;i<nb&&i<(int)buffer.Length();i++) {
         if (buffer[i] != fileBuffer[i]) {
            identical = false;
            break;
         }
      }
   }
   else
      identical = false;
   if (!identical) {
      fileHandle = open(hFile.Data(),O_TRUNC  | O_CREAT,S_IREAD | S_IWRITE  );
      close(fileHandle);
      fileHandle = open(hFile.Data(),O_RDWR  | O_CREAT,S_IREAD | S_IWRITE  );
      if (makeOutput) cout << "      " << hFile.Data() << endl;
      nb = write(fileHandle,buffer.Data(), buffer.Length());
      close(fileHandle);
   }
   return true;
}
