//// Author: 
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// MEGTADCPedestal                                                            //
//                                                                            //
// Calculates the ADC Pedestal.                                                 
// 
// 
// This header has been generated by the ROMEBuilder.
// The event methods have been written by .
// 
// Please note: The following information is only correct after executing the
//              ROMEBuilder.
// 
// This task accesses the following folders :
//    CMPMTData
//    CMPMTInfo
// 
// This task contains the following histgrams :
//    ADC0Histo
//    ADC1Histo
//
// The histograms are created and saved automaticaly by the task.
//
// The following method can be used to fill a histogram :
//
// Fill<Histogram Name>(double value,double weight)
//
// For histogram arrays use :
//
// Fill<Histogram Name>At(int index,double value,double weight)
//
// If more histogram functions are needed use the following function the get
// a handle to the histogram and use the root functions.
//
// Get<Histogram Name>()
//
// For histogram arrays use :
//
// Get<Histogram Name>At(int index)
//                                                                            //
/////////////////////////////////////----///////////////////////////////////////

#if defined( _MSC_VER )
#include <conio.h>
#include <strstream>
#endif
#if defined ( __linux__ )
#include <sstream>
#include <unistd.h>
#include <stdlib.h>
#include <sys/io.h>
#include <sys/ioctl.h>
#endif

#include <TCanvas.h>
#include <TStyle.h>
#include <TF1.h>
#include <TH1.h>
#include <include/generated/MEGTADCPedestal.h>
#include <ROMEStrArray.h>
#include <Riostream.h>

ClassImp(MEGTADCPedestal)

void MEGTADCPedestal::Init()
{
}

void MEGTADCPedestal::BeginOfRun()
{
//   gAnalyzer->WriteCMPMTInfoDataBase();
/*   ROMEStr2DArray *values = new ROMEStr2DArray(1,1);
   values->SetAt("xxx",0,0);
//   gAnalyzer->GetDataBase(0)->Write(values,"/RunCatalog2(id=0)/timestamp",0);
   gAnalyzer->GetDataBase(0)->Write(values,"/RunCatalog2(id=0)/timestamp",0);
*/
   int nPMT = gAnalyzer->GetGSP()->GetPMT()->GetNumbers()->GetNumberOfLXePMT();
   char name[80],title[80];
   for (int j=0;j<nPMT;j++) {
      sprintf(name,"adc0_%i%i%i",j/100,(j%100)/10,j%10);
      sprintf(title,"ADC0 of PMT %s",gAnalyzer->GetCMPMTInfoAt(j)->GetAddress().Data());
      GetADC0HistoAt(j)->SetName(name);
      GetADC0HistoAt(j)->SetTitle(title);

      sprintf(name,"adc1_%i%i%i",j/100,(j%100)/10,j%10);
      sprintf(title,"ADC1 of PMT %s",gAnalyzer->GetCMPMTInfoAt(j)->GetAddress().Data());
      GetADC1HistoAt(j)->SetName(name);
      GetADC1HistoAt(j)->SetTitle(title);
   }
}

void MEGTADCPedestal::Event()
{
   int nPMT = gAnalyzer->GetGSP()->GetPMT()->GetNumbers()->GetNumberOfLXePMT();

   for (int i=0;i<nPMT;i++) {
      MEGCMPMTData *pmtData = gAnalyzer->GetCMPMTDataAt(i);
      int ipmt = gAnalyzer->GetCMPMTInfoAt(i)->GetADCID();
      FillADC0HistoAt(ipmt,pmtData->GetADC0Data());
      FillADC1HistoAt(ipmt,pmtData->GetADC1Data());
   }
}

void MEGTADCPedestal::EndOfRun()
{
   int nPMT = gAnalyzer->GetGSP()->GetPMT()->GetNumbers()->GetNumberOfLXePMT();
   int nLXePMT = gAnalyzer->GetGSP()->GetPMT()->GetNumbers()->GetNumberOfLXePMT();
   int ipmt,i,j;
   double *pedestal = new double[nPMT*2];    //pedestal
   double *spedestal = new double[nPMT*2];   //sigma of pedestal
   double *espedestal = new double[nPMT*2];  //err of sigma of pedestal

   char runNumber[6];

//   TCanvas *c1 = new TCanvas(false);

   TStyle *mystyle = new TStyle("mystyle","");
   mystyle->cd();
   mystyle->SetOptFit(1);
   if (!gAnalyzer->isBatchMode()) {
//      c1 = new TCanvas("c1");
//      c1->cd();
   }
   TF1 *g1=new TF1("g1","gaus");//fit function
   TF1 *g2=new TF1("g2","pol1");//fit function
   g1->SetLineWidth(1);
   g2->SetLineWidth(1);
   g1->SetLineColor(2);
   g2->SetLineColor(2);

   TH1F *hist = new TH1F("","",0,0,0);;
   TH1F *pspread=new TH1F("pspread","Spread in Sigma",100,0,20);
   pspread->SetXTitle("pedestal spread in sigma [ch]");          
    
   //calculate pedestal
   for(ipmt=0 ; ipmt<nPMT ; ipmt++){
   	for(i=0;i<2;i++){
         if(i==0) {
            hist = GetADC0HistoAt(ipmt);
            hist->SetXTitle("raw ADC 0 Sum[ch]");
         }
         else {
            hist = GetADC1HistoAt(ipmt);
            hist->SetXTitle("raw ADC 1 Sum[ch]");
         }
    	   float xmin = hist->GetMean() - 50.;
	      float xmax = hist->GetMean() + 50.;	  
	      hist->Fit("g1","Q,0","R",xmin,xmax);
	      hist->GetXaxis()->SetRange(hist->GetXaxis()->FindBin(xmin),
		         hist->GetXaxis()->FindBin(xmax));
         if (!gAnalyzer->isBatchMode()) {
//	         hist->Draw();
//	         g1->Draw("same");
//            c1->Update();
         }

         pedestal[ipmt+i*nPMT]  = g1->GetParameter(1);
	      spedestal[ipmt+i*nPMT] = g1->GetParameter(2);
	      espedestal[ipmt+i*nPMT]= g1->GetParError(2);
   	}
   }

    
   //Draw pedestal spread distribution
   for(j=0;j<nLXePMT;j++){
      pspread->Fill(spedestal[j]);
   }
/*   if (!gAnalyzer->isBatchMode()) {
      pspread->Draw();
      c1->SetLogy(1);
      c1->Update();
   }
*/
   delete pedestal;
   delete spedestal;
   delete espedestal;
   delete pspread;
}

void MEGTADCPedestal::Terminate()
{
}

