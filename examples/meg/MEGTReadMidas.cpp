//// Author: Matthias Schneebeli
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// MEGTReadMidas                                                              //
//                                                                            //
// Reads Midas Data.                                                            
//                                                                            //
//                                                                            //
// This file has been generated by the ROMEBuilder.                           //
//                                                                            //
// This task contains the following histgrams :
//
// The histograms are created and saved automaticaly by the task.
//
// The following methods can be used to fill the histogram and to set the
// right name,title and binwidth of the histogram :
//
// Fill<Histogram Name>(double value,double weight)
//
// For histogram arrays use :
//
// Fill<Histogram Name>At(int index,double value,double weight)
//
// If more histogram functions are needed use the following function the get
// a handle to the histogram and use the root functions.
//
// Get<Histogram Name>Handle()
//
// For histogram arrays use :
//
// Get<Histogram Name>HandleAt(int index)
//                                                                            //
/////////////////////////////////////----///////////////////////////////////////

#if defined( _MSC_VER )
#include <io.h>
#define O_RDONLY_BINARY O_RDONLY | O_BINARY
#endif
#if defined ( __linux__ )
#include <unistd.h>
#include <stdlib.h>
#include <sys/io.h>
#include <sys/types.h>
#include <sys/stat.h>
#define O_RDONLY_BINARY O_RDONLY
#endif

#include <TFile.h>
#include <ROME.h>
#include <ROMEStatic.h>
#include <include/tasks/MEGTReadMidas.h>
#include <Riostream.h>

ClassImp(MEGTReadMidas)


void MEGTReadMidas::Init()
{
}

void MEGTReadMidas::BeginOfRun()
{
}

void MEGTReadMidas::Event()
{
   // Read Midas Banks and fill theme to folder
   float invalid = gAnalyzer->GetGeneralSteeringParameters()->GetInvalidValue();

   const int nPMT = gAnalyzer->GetGeneralSteeringParameters()->GetPMT()->GetNumbers()->GetNumberOfPMT();
   const int nFTDC = gAnalyzer->GetGeneralSteeringParameters()->GetPMT()->GetNumbers()->GetNumberOfFTDC();
   const int nCTDC = gAnalyzer->GetGeneralSteeringParameters()->GetPMT()->GetNumbers()->GetNumberOfCTDC();
   const int nVTDC = gAnalyzer->GetGeneralSteeringParameters()->GetPMT()->GetNumbers()->GetNumberOfVTDC();

   Int_t i;
   Float_t  *vfTDC = new Float_t[nPMT];
   int channel=0;float time=0,k;
   int n_f,n_c,n_v;

   // Read Banks

   // TDC Banks
   n_f = gAnalyzer->GetFTDCBankEntries();
   n_c = gAnalyzer->GetCTDCBankEntries();
   if (n_f == nFTDC && n_c == nCTDC) {
      for (i=nFTDC;i<nPMT;i++) vfTDC[i] = invalid;
 
      // FTDC Bank
      for (i=0;i<nFTDC;i++) {
         vfTDC[i] = (Float_t)(0.025f*gAnalyzer->GetFTDCBankAt(i)->data);
      }

      // CTDC Bank
      for (i=0;i<nCTDC;i++) {
         for (k=0,channel=0 ; k<5 && (int)(gAnalyzer->GetCTDCBankAt(i)>>16) != 19+k ; k++){
            channel += 16;
         }
         channel += (gAnalyzer->GetCTDCBankAt(i) >> 12) & 0xF;
         channel += nFTDC;
         time = (float) (gAnalyzer->GetCTDCBankAt(i) & 0xFFF);
         if (time >= 1.f && time < 4096.0f) {
            time *= 0.025f;
            if(channel < nFTDC + nCTDC) {
               vfTDC[channel] = time;
            }
         }
         else vfTDC[channel] = invalid;
      }

      // VTDC Bank
      n_v = gAnalyzer->GetVTDCBankEntries();
      for (i=0;i<n_v;i++) {
         if(gAnalyzer->GetVTDCBankAt(i)->tag == 0) {//( tag = 0:data, 2:header, 4:EOB 
	         channel = nFTDC + nCTDC; // put VME TDCs after FB&Camac TDCs 
	         channel += gAnalyzer->GetVTDCBankAt(i)->geo_addr*32;
	         channel += gAnalyzer->GetVTDCBankAt(i)->channel;
	         time = gAnalyzer->GetVTDCBankAt(i)->data;
	         // convert to ns 
	         time *= 0.035f;
	         if (channel < nPMT) {
               // fill histos with TDC value 
	            vfTDC[channel] = time;
            }
         }
      }
   }
   else {
      gAnalyzer->SetFillEvent(false);
      delete vfTDC;
      return;
   }
   // write data to folder
   int iadc,itdc;
   for (i=0;i<nPMT;i++) {
      iadc = gAnalyzer->GetCMPMTInfoAt(i)->GetADCID();
      itdc = gAnalyzer->GetCMPMTInfoAt(i)->GetTDCID();
      gAnalyzer->GetCMPMTDataAt(i)->SetADC0Data((Float_t)gAnalyzer->GetADC0BankAt(iadc));
      gAnalyzer->GetCMPMTDataAt(i)->SetADC1Data((Float_t)gAnalyzer->GetADC1BankAt(iadc));
      gAnalyzer->GetCMPMTDataAt(i)->SetTDCData(vfTDC[itdc]);
   }
	  
   delete vfTDC;
   return;
}

void MEGTReadMidas::EndOfRun()
{
}

void MEGTReadMidas::Terminate()
{
}


