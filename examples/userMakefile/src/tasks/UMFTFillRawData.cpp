////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// UMFTFillRawData                                                            //
//                                                                            //
// Begin_Html <!--
/*-->

<!--*/
// --> End_Html
//                                                                            //
// The event methods have been written by .                                   //
//                                                                            //
// Please note: The following information is only correct after executing     //
// the ROMEBuilder.                                                           //
//                                                                            //
// This task accesses the following folders :                                 //
//     Raw                                                                    //
//                                                                            //
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/* Generated header file containing necessary includes                        */
#include "generated/UMFTFillRawDataGeneratedIncludes.h"

/*  This header was generated by ROMEBuilder. Manual changes above the        *
 * following line will be lost next time ROMEBuilder is executed.             */
/////////////////////////////////////----///////////////////////////////////////

#include "generated/UMFAnalyzer.h"
#include "tasks/UMFTFillRawData.h"
#include "ROMEiostream.h"

// uncomment if you want to include headers of all folders
//#include "UMFAllFolders.h"


ClassImp(UMFTFillRawData)

void UMFTFillRawData::Init()
{
}

void UMFTFillRawData::BeginOfRun()
{
}

void UMFTFillRawData::Event()
{
   Int_t i;
   for (i = 0; i < 10; i++) {
      gAnalyzer->GetRawAt(i)->GetData()->SetDataLength(1);
      gAnalyzer->GetRawAt(i)->GetData()->SetDataSize(1);
      gAnalyzer->GetRawAt(i)->GetData()->SetDataCopy("a", 1);
   }
}

void UMFTFillRawData::EndOfRun()
{
}

void UMFTFillRawData::Terminate()
{
}

