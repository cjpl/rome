// Author: Ryu Sawada

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// FOTTab                                                                     //
//                                                                            //
//                                                                            //
// Followings are include files of folders. ROMEBuilder will update it with   //
// reading this source code when it is executed next time.                    //
#include "generated/FOODB.h"
#include "generated/FOROMEDataBase.h"
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
/*  This header was generated by ROMEBuilder. Manual changes above the        *
 * following line will be lost next time ROMEBuilder is executed.             */
/////////////////////////////////////----///////////////////////////////////////
#include "generated/FOAnalyzer.h"
#include "include/generated/FOWindow.h"
#include "include/tabs/FOTTab.h"

// uncomment if you want to include headers of all folders
//#include "FOAllFolders.h"


ClassImp(FOTTab)

void FOTTab::Init()
{
   //ODB
// connection to ODB is not supported yet.
#if 0
   gAnalyzer->ReadODB();
   cout << gAnalyzer->GetODB()->GetRunNumber() << endl;
#else
   gAnalyzer->GetODB()->SetRunNumber(0);
#endif

   //ROMEDataBase
   gAnalyzer->ReadROMEDataBase();
   cout << "comment " << gAnalyzer->GetROMEDataBase()->Getcomment() << endl;

   //ROMEFolder
   if (gAnalyzer->GetNetFolder("mynetfolder")) {
      fRunInfo = (FORunInfo *) ((TFolder *) gAnalyzer->GetNetFolder("mynetfolder")->FindObjectAny("RunInfo"))->FindObjectAny("FORunInfo");
      cout << "run mode " << fRunInfo->GetName() << endl;
   }

   if (gAnalyzer->GetNetFolder("mynetfolder")) {
      fPMTDatas = (TClonesArray *) ((TFolder *) gAnalyzer->GetNetFolder("mynetfolder")->FindObjectAny("PMTData"))->FindObjectAny("FOPMTData");
      for (int i = 0; i < fPMTDatas->GetEntries(); i++) {
         cout << "PMT data-ADC " << i << " :" << ((FOPMTData *) (fPMTDatas->At(i)))->GetADC() << endl;
      }
   }
}

void FOTTab::EndInit()
{
}

void FOTTab::EventHandler()
{
}

void FOTTab::MenuClicked(TGPopupMenu *menu,Long_t param)
{
}

void FOTTab::TabSelected()
{
}
void FOTTab::TabUnSelected()
{
}

