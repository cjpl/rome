// Author: Ryu Sawada

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// RDBTMakeQuery                                                              //
//                                                                            //
// Description:                                                               //
// This is an example to use SQL query from analyzer.                         //
//                                                                            //
// Usage:                                                                     //
//                                                                            //
//                                                                            //
// Status:                                                                    //
//                                                                            //
//                                                                            //
// To Do:                                                                     //
//                                                                            //
//                                                                            //
// Known Problems:                                                            //
//                                                                            //
//                                                                            //
// The event methods have been written by Ryu Sawada.                         //
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
/*  This header was generated by ROMEBuilder. Manual changes above the        *
 * following line will be lost next time ROMEBuilder is executed.             */
/////////////////////////////////////----///////////////////////////////////////

#include "generated/RDBAnalyzer.h"
#include "tasks/RDBTMakeQuery.h"
#include "ROMEiostream.h"
#include "ROMESQLDataBase.h"

ClassImp(RDBTMakeQuery)

void RDBTMakeQuery::Init()
{
}

void RDBTMakeQuery::BeginOfRun()
{
}

void RDBTMakeQuery::Event()
{
}

void RDBTMakeQuery::EndOfRun()
{
   ROMEString query;      // SQL query
   ROMEStr2DArray result; // Container to store result
   Int_t i;

   // search SQL database
   ROMESQLDataBase *db = 0;
   for (i = 0; i < gAnalyzer->GetNumberOfDataBases(); i++) {
      if (!strcmp(gAnalyzer->GetDataBase(i)->GetType(), "sql")){
         db = dynamic_cast<ROMESQLDataBase*>(gAnalyzer->GetDataBase(i));
         break;
      }
   }
   if (!db) { // database was not found.
      Error("EndOfRun", "No SQL database was found.");
      return;
   }

   //
   // Read single value
   //
   query.SetFormatted("SELECT BBB.bbb FROM BBB WHERE BBB.id=1");
   if (!db->MakeQuery(query.Data(),kTRUE)) { // second argument is flag if storing query result in buffer.
      Error("Event", "%s", db->GetErrorMessage());
      db->FreeResult();
      return;
   }
   if (!db->GetNumberOfRows()) {
      // there is no record which matches the query.
      Error("Event", "%s", db->GetErrorMessage());
      db->FreeResult();
      return;
   }
   if (!db->NextRow()) {
      Error("Event", "%s", db->GetErrorMessage());
      db->FreeResult();
      return;
   }
   result.SetAt(db->GetField(0), 0, 0);
   cout<<"RDBTMakeQuery::Event."<<endl;
   cout<<"Result from '"<<query<<"' is"<<endl;
   cout<<result.At(0, 0)<<endl;
   db->FreeResult();


   //
   // Read array
   //
   query.SetFormatted("SELECT CCC.idx,CCC.ccc FROM AAA,CCC WHERE AAA.id=1 AND CCC.id=AAA.CCC_id;");
   if (!db->MakeQuery(query.Data(),kTRUE)) { // second argument is flag if storing query result in buffer.
      Error("Event", "%s", db->GetErrorMessage());
      db->FreeResult();
      return;
   }
   Int_t numberOfResults = db->GetNumberOfRows();
   if (!numberOfResults) {
      // there is no record which matches the query.
      Error("Event", "%s", db->GetErrorMessage());
      db->FreeResult();
      return;
   }
   cout<<"Result from '"<<query<<"' is"<<endl;
   cout<<"idx\tccc"<<endl;
   for (i = 0; i < numberOfResults; i++) {
      if (!db->NextRow()) {
         Error("Event", "%s", db->GetErrorMessage());
         db->FreeResult();
         return;
      }
      result.SetAt(db->GetField(0),i, 0);
      result.SetAt(db->GetField(1),i, 1);
      cout<<result.At(i, 0)<<"\t"<<result.At(i, 1)<<endl;
   }
   db->FreeResult();
}

void RDBTMakeQuery::Terminate()
{
}

