//// Author: Ryu Sawada
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// RDBTPrintFolders                                                           //
//                                                                            //
// This task shows containts of folders.                                        
// 
// 
// This header has been generated by the ROMEBuilder.
// The event methods have been written by Ryu Sawada.
// 
// Please note: The following information is only correct after executing the
//              ROMEBuilder.
// 
// This task accesses the following folders :
//    SingleFolder
//    ArrayFolder
// 
//                                                                            //
/////////////////////////////////////----///////////////////////////////////////

#include <include/tasks/RDBTPrintFolders.h>
#include <Riostream.h>
#include <TTimeStamp.h>

ClassImp(RDBTPrintFolders)

void RDBTPrintFolders::Init()
{
}

void RDBTPrintFolders::BeginOfRun()
{
   cout<<" --------------- SingleFolder  ---------------"<<endl;
   cout<<"RunNumber :"<<gAnalyzer->GetCurrentRunNumber()<<endl;
   cout<<"bbb       :"<<gAnalyzer->GetSingleFolder()->Getbbb()<<endl<<endl;
   cout<<"ggg       :"<<gAnalyzer->GetSingleFolder()->Getggg()<<endl<<endl;
   Int_t i,j;
   for(i=0;i<gAnalyzer->GetSingleFolder()->Getbbb();i++){
      cout<<" -------------- ArrayFolder("<<i<<")  --------------"<<endl;
      cout<<"ccc1      :"<<gAnalyzer->GetArrayFolderAt(i)->Getccc1()<<endl;
      cout<<"ccc2      :"<<gAnalyzer->GetArrayFolderAt(i)->Getccc2()<<endl;
      cout<<"ccc3      :"<<gAnalyzer->GetArrayFolderAt(i)->Getccc3()<<endl;
      for(j=0;j<4;j++)
         cout<<"ddd("<<j<<")    :"<<gAnalyzer->GetArrayFolderAt(i)->GetdddAt(j)<<endl;
      cout<<"jjj1      :"<<gAnalyzer->GetArrayFolderAt(i)->Getjjj1()<<endl;
      cout<<"jjj2      :"<<gAnalyzer->GetArrayFolderAt(i)->Getjjj2()<<endl;
   }

//Writing test
   TTimeStamp now;
   now.Set();
   ROMEString value;
   value.SetFormatted("%d",now.GetSec());
   Int_t iDB;
   ROMEStr2DArray* values = new ROMEStr2DArray(1,1);
   ROMEString path;
   path.SetFormatted("/TTT[id=%d]/ttt",gAnalyzer->GetCurrentRunNumber()+2);
   for(iDB=0;iDB<gAnalyzer->GetNumberOfDataBases();iDB++){
      if(!strcmp(gAnalyzer->GetDataBase(iDB)->GetName(),"mydatabase")){
         values->SetAt(value,0,0);
         gAnalyzer->GetDataBase(iDB)->Write(values,path.Data(),gAnalyzer->GetCurrentRunNumber());
         break;
      }
   }
   now.Set(0,0,0,0);
   for(iDB=0;iDB<gAnalyzer->GetNumberOfDataBases();iDB++){
      if(!strcmp(gAnalyzer->GetDataBase(iDB)->GetName(),"mydatabase")){
         gAnalyzer->GetDataBase(iDB)->Read(values,path.Data(),gAnalyzer->GetCurrentRunNumber());
         break;
      }
   }
   now.Set(atoi(values->At(0,0).Data()),0,0,0);
   now.Print();
}

void RDBTPrintFolders::Event()
{
}

void RDBTPrintFolders::EndOfRun()
{
}

void RDBTPrintFolders::Terminate()
{
}

